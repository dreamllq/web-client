// This file is auto-generated by @hey-api/openapi-ts

export const AuthVerifyResponseSchema = {
    type: 'object',
    properties: {
        code: {
            type: 'number'
        },
        data: {
            type: 'boolean'
        }
    },
    required: ['code', 'data']
} as const;

export const SuccessResultSchema = {
    type: 'object',
    properties: {
        code: {
            type: 'number'
        },
        data: {
            type: 'object'
        }
    },
    required: ['code', 'data']
} as const;

export const LoginDtoSchema = {
    type: 'object',
    properties: {
        username: {
            type: 'string',
            description: '用户名'
        },
        password: {
            type: 'string',
            description: '用户密码'
        }
    },
    required: ['username', 'password']
} as const;

export const TokenSchema = {
    type: 'object',
    properties: {
        access_token: {
            type: 'string'
        }
    },
    required: ['access_token']
} as const;

export const AuthLoginSuccessResponseSchema = {
    type: 'object',
    properties: {
        code: {
            type: 'number'
        },
        data: {
            '$ref': '#/components/schemas/Token'
        }
    },
    required: ['code', 'data']
} as const;

export const LoginBySmsCodeDtoSchema = {
    type: 'object',
    properties: {
        mobile: {
            type: 'string',
            description: '手机号'
        },
        code: {
            type: 'string',
            description: '验证码'
        }
    },
    required: ['mobile', 'code']
} as const;

export const LoginByWeixinDtoSchema = {
    type: 'object',
    properties: {
        appid: {
            type: 'string'
        },
        code: {
            type: 'string'
        }
    },
    required: ['appid', 'code']
} as const;

export const LoginByCodeDtoSchema = {
    type: 'object',
    properties: {
        code: {
            type: 'string'
        }
    },
    required: ['code']
} as const;

export const PasswordSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            description: '用户id'
        },
        password: {
            type: 'string',
            description: '密码'
        }
    },
    required: ['id', 'password']
} as const;

export const ResourceSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            description: '资源id'
        },
        name: {
            type: 'string',
            description: '资源名称'
        },
        key: {
            type: 'string',
            description: '资源key'
        },
        desc: {
            type: 'string',
            description: '资源描述'
        },
        createDate: {
            format: 'date-time',
            type: 'string',
            description: '创建时间'
        },
        updateDate: {
            format: 'date-time',
            type: 'string',
            description: '更新时间'
        }
    },
    required: ['id', 'name', 'key', 'desc', 'createDate', 'updateDate']
} as const;

export const RoleSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            description: '角色id'
        },
        name: {
            type: 'string',
            description: '角色名称'
        },
        desc: {
            type: 'string',
            description: '角色描述'
        },
        resources: {
            description: '资源列表',
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Resource'
            }
        },
        creator: {
            '$ref': '#/components/schemas/User'
        },
        createDate: {
            format: 'date-time',
            type: 'string',
            description: '创建时间'
        },
        updateDate: {
            format: 'date-time',
            type: 'string',
            description: '更新时间'
        }
    },
    required: ['id', 'name', 'desc', 'resources', 'creator', 'createDate', 'updateDate']
} as const;

export const WeixinSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string'
        },
        name: {
            type: 'string'
        },
        appid: {
            type: 'string'
        },
        appSecret: {
            type: 'string'
        },
        appType: {
            type: 'string',
            enum: ['app', 'mp', 'web', 'official_account']
        },
        weixinPlatformUsers: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/WeixinPlatformUser'
            }
        },
        createDate: {
            format: 'date-time',
            type: 'string',
            description: '创建时间'
        },
        updateDate: {
            format: 'date-time',
            type: 'string',
            description: '更新时间'
        }
    },
    required: ['id', 'name', 'appid', 'appSecret', 'appType', 'createDate', 'updateDate']
} as const;

export const WeixinPlatformUserSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string'
        },
        user: {
            '$ref': '#/components/schemas/User'
        },
        weixin: {
            '$ref': '#/components/schemas/Weixin'
        },
        createDate: {
            format: 'date-time',
            type: 'string',
            description: '创建时间'
        },
        updateDate: {
            format: 'date-time',
            type: 'string',
            description: '更新时间'
        }
    },
    required: ['id', 'createDate', 'updateDate']
} as const;

export const AreaSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'number'
        },
        parentId: {
            type: 'number'
        },
        deep: {
            type: 'number'
        },
        name: {
            type: 'string'
        },
        pinyinPrefix: {
            type: 'string'
        },
        pinyin: {
            type: 'string'
        },
        extId: {
            type: 'string'
        },
        extName: {
            type: 'string'
        }
    },
    required: ['id', 'parentId', 'deep', 'name', 'pinyinPrefix', 'pinyin', 'extId', 'extName']
} as const;

export const AddressSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string'
        },
        name: {
            type: 'string'
        },
        mobile: {
            type: 'string'
        },
        country: {
            type: 'number'
        },
        province: {
            '$ref': '#/components/schemas/Area'
        },
        city: {
            '$ref': '#/components/schemas/Area'
        },
        region: {
            '$ref': '#/components/schemas/Area'
        },
        address: {
            type: 'string'
        },
        isDefault: {
            type: 'boolean'
        },
        user: {
            '$ref': '#/components/schemas/User'
        },
        createDate: {
            format: 'date-time',
            type: 'string',
            description: '创建时间'
        },
        updateDate: {
            format: 'date-time',
            type: 'string',
            description: '更新时间'
        }
    },
    required: ['id', 'name', 'mobile', 'country', 'province', 'city', 'region', 'address', 'isDefault', 'user', 'createDate', 'updateDate']
} as const;

export const UserSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            description: '用户id'
        },
        username: {
            type: 'string',
            description: '用户名'
        },
        password: {
            '$ref': '#/components/schemas/Password'
        },
        nickName: {
            type: 'string',
            description: '昵称'
        },
        headimg: {
            type: 'string'
        },
        mobile: {
            type: 'string',
            description: '手机号'
        },
        isActive: {
            type: 'boolean',
            description: '是否活跃'
        },
        isSuper: {
            type: 'number',
            enum: [true, false],
            description: '是否为超级管理员'
        },
        roles: {
            description: '角色',
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Role'
            }
        },
        weixinPlatformUsers: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/WeixinPlatformUser'
            }
        },
        addresses: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Address'
            }
        },
        createDate: {
            format: 'date-time',
            type: 'string',
            description: '创建时间'
        },
        updateDate: {
            format: 'date-time',
            type: 'string',
            description: '更新时间'
        }
    },
    required: ['id', 'username', 'password', 'nickName', 'headimg', 'mobile', 'isActive', 'isSuper', 'roles', 'weixinPlatformUsers', 'addresses', 'createDate', 'updateDate']
} as const;

export const UserGetAllSuccessResponseSchema = {
    type: 'object',
    properties: {
        code: {
            type: 'number'
        },
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/User'
            }
        }
    },
    required: ['code', 'data']
} as const;

export const UsersPaginateResultSchema = {
    type: 'object',
    properties: {
        list: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/User'
            }
        },
        count: {
            type: 'number'
        }
    },
    required: ['list', 'count']
} as const;

export const UsersPaginateSuccessResponseSchema = {
    type: 'object',
    properties: {
        code: {
            type: 'number'
        },
        data: {
            '$ref': '#/components/schemas/UsersPaginateResult'
        }
    },
    required: ['code', 'data']
} as const;

export const CreateUsersDtoSchema = {
    type: 'object',
    properties: {
        username: {
            type: 'string',
            description: '用户名'
        },
        nickName: {
            type: 'string',
            description: '昵称'
        },
        password: {
            type: 'string',
            description: '用户密码'
        },
        mobile: {
            type: 'string'
        },
        headimg: {
            type: 'string'
        },
        roleIds: {
            description: '角色列表',
            type: 'array',
            items: {
                type: 'string'
            }
        }
    }
} as const;

export const InsertSuccessResultSchema = {
    type: 'object',
    properties: {
        code: {
            type: 'number'
        },
        data: {
            type: 'object'
        }
    },
    required: ['code', 'data']
} as const;

export const DeleteSuccessResultSchema = {
    type: 'object',
    properties: {
        code: {
            type: 'number'
        },
        data: {
            type: 'object'
        }
    },
    required: ['code', 'data']
} as const;

export const UserGetSuccessResponseSchema = {
    type: 'object',
    properties: {
        code: {
            type: 'number'
        },
        data: {
            '$ref': '#/components/schemas/User'
        }
    },
    required: ['code', 'data']
} as const;

export const UserUpdateDtoSchema = {
    type: 'object',
    properties: {
        roleIds: {
            description: '角色列表',
            type: 'array',
            items: {
                type: 'string'
            }
        },
        username: {
            type: 'string'
        },
        nickName: {
            type: 'string'
        },
        mobile: {
            type: 'string'
        },
        headimg: {
            type: 'string'
        }
    },
    required: ['roleIds']
} as const;

export const UpdateSuccessResultSchema = {
    type: 'object',
    properties: {
        code: {
            type: 'number'
        },
        data: {
            type: 'object'
        }
    },
    required: ['code', 'data']
} as const;

export const UsersBindWeixinDtoSchema = {
    type: 'object',
    properties: {
        appid: {
            type: 'string'
        },
        code: {
            type: 'string'
        }
    },
    required: ['appid', 'code']
} as const;

export const UsersBindMobileDtoSchema = {
    type: 'object',
    properties: {
        mobile: {
            type: 'string'
        },
        code: {
            type: 'string'
        }
    },
    required: ['mobile', 'code']
} as const;

export const UsersBindUsernameDtoSchema = {
    type: 'object',
    properties: {
        username: {
            type: 'string'
        },
        password: {
            type: 'string'
        }
    },
    required: ['username', 'password']
} as const;

export const RoleGetAllSuccessResponseSchema = {
    type: 'object',
    properties: {
        code: {
            type: 'number'
        },
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Role'
            }
        }
    },
    required: ['code', 'data']
} as const;

export const RolesPaginateResultSchema = {
    type: 'object',
    properties: {
        list: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Role'
            }
        },
        count: {
            type: 'number'
        }
    },
    required: ['list', 'count']
} as const;

export const RolesPaginateSuccessResponseSchema = {
    type: 'object',
    properties: {
        code: {
            type: 'number'
        },
        data: {
            '$ref': '#/components/schemas/RolesPaginateResult'
        }
    },
    required: ['code', 'data']
} as const;

export const CreateRolesDtoSchema = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            description: '角色名称'
        },
        desc: {
            type: 'string',
            description: '角色描述'
        },
        resourceIds: {
            description: '角色关联资源id列表',
            type: 'array',
            items: {
                type: 'string'
            }
        }
    },
    required: ['name', 'resourceIds']
} as const;

export const RoleGetSuccessResponseSchema = {
    type: 'object',
    properties: {
        code: {
            type: 'number'
        },
        data: {
            '$ref': '#/components/schemas/Role'
        }
    },
    required: ['code', 'data']
} as const;

export const UpdateRoleDtoSchema = {
    type: 'object',
    properties: {
        desc: {
            type: 'string',
            description: '角色描述'
        },
        resourceIds: {
            description: '角色关联资源id列表',
            type: 'array',
            items: {
                type: 'string'
            }
        }
    },
    required: ['resourceIds']
} as const;

export const ResourceGetAllSuccessResultSchema = {
    type: 'object',
    properties: {
        code: {
            type: 'number'
        },
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Resource'
            }
        }
    },
    required: ['code', 'data']
} as const;

export const ResourcePaginateResultSchema = {
    type: 'object',
    properties: {
        list: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Resource'
            }
        },
        count: {
            type: 'number'
        }
    },
    required: ['list', 'count']
} as const;

export const ResourcePaginateSuccessResultSchema = {
    type: 'object',
    properties: {
        code: {
            type: 'number'
        },
        data: {
            '$ref': '#/components/schemas/ResourcePaginateResult'
        }
    },
    required: ['code', 'data']
} as const;

export const CreateResourceDtoSchema = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            description: '资源名称'
        },
        key: {
            type: 'string',
            description: '资源key'
        },
        desc: {
            type: 'string',
            description: '资源描述'
        }
    },
    required: ['name', 'key']
} as const;

export const ResourceGetSuccessResultSchema = {
    type: 'object',
    properties: {
        code: {
            type: 'number'
        },
        data: {
            '$ref': '#/components/schemas/Resource'
        }
    },
    required: ['code', 'data']
} as const;

export const UpdateResourceDtoSchema = {
    type: 'object',
    properties: {
        key: {
            type: 'string',
            description: '资源名称'
        },
        desc: {
            type: 'string',
            description: '资源描述'
        }
    },
    required: ['key', 'desc']
} as const;

export const WeixinPlatformUserPaginatePageSchema = {
    type: 'object',
    properties: {
        count: {
            type: 'number'
        },
        list: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/WeixinPlatformUser'
            }
        }
    },
    required: ['count', 'list']
} as const;

export const WeixinPlatformUserPaginateResponseSchema = {
    type: 'object',
    properties: {
        code: {
            type: 'number'
        },
        data: {
            '$ref': '#/components/schemas/WeixinPlatformUserPaginatePage'
        }
    },
    required: ['code', 'data']
} as const;

export const WeixinGetAllResponseSchema = {
    type: 'object',
    properties: {
        code: {
            type: 'number'
        },
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Weixin'
            }
        }
    },
    required: ['code', 'data']
} as const;

export const WeixinPaginateResultSchema = {
    type: 'object',
    properties: {
        list: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Weixin'
            }
        },
        count: {
            type: 'number'
        }
    },
    required: ['list', 'count']
} as const;

export const WeixinPaginateSuccessResponseSchema = {
    type: 'object',
    properties: {
        code: {
            type: 'number'
        },
        data: {
            '$ref': '#/components/schemas/WeixinPaginateResult'
        }
    },
    required: ['code', 'data']
} as const;

export const WeixinCreateDtoSchema = {
    type: 'object',
    properties: {
        name: {
            type: 'string'
        },
        appid: {
            type: 'string'
        },
        appSecret: {
            type: 'string'
        },
        appType: {
            type: 'string'
        }
    },
    required: ['name', 'appid', 'appSecret', 'appType']
} as const;

export const WeixinGetSuccessResponseSchema = {
    type: 'object',
    properties: {
        code: {
            type: 'number'
        },
        data: {
            '$ref': '#/components/schemas/Weixin'
        }
    },
    required: ['code', 'data']
} as const;

export const WeixinUpdateDtoSchema = {
    type: 'object',
    properties: {
        appSecret: {
            type: 'string'
        },
        appType: {
            type: 'string'
        }
    },
    required: ['appSecret', 'appType']
} as const;

export const WeixinOfficialAccountConfigSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string'
        },
        token: {
            type: 'string'
        },
        encodingAesKey: {
            type: 'string'
        },
        checkSignature: {
            type: 'boolean'
        },
        weixin: {
            '$ref': '#/components/schemas/Weixin'
        },
        createDate: {
            format: 'date-time',
            type: 'string',
            description: '创建时间'
        },
        updateDate: {
            format: 'date-time',
            type: 'string',
            description: '更新时间'
        }
    },
    required: ['id', 'token', 'encodingAesKey', 'checkSignature', 'createDate', 'updateDate']
} as const;

export const WeixinOfficialAccountConfigGetByWeixinSuccessResponseSchema = {
    type: 'object',
    properties: {
        code: {
            type: 'number'
        },
        data: {
            '$ref': '#/components/schemas/WeixinOfficialAccountConfig'
        }
    },
    required: ['code', 'data']
} as const;

export const WeixinOfficialAccountConfigUpdateDtoSchema = {
    type: 'object',
    properties: {
        token: {
            type: 'string'
        },
        encodingAesKey: {
            type: 'string'
        },
        checkSignature: {
            type: 'boolean'
        }
    },
    required: ['token', 'encodingAesKey', 'checkSignature']
} as const;

export const WeixinPayCreateDtoSchema = {
    type: 'object',
    properties: {
        name: {
            type: 'string'
        },
        mchid: {
            type: 'string'
        },
        partnerKey: {
            type: 'string'
        },
        pfx: {
            type: 'string'
        },
        notifyUrl: {
            type: 'string'
        },
        spbillCreateIp: {
            type: 'string'
        }
    },
    required: ['name', 'mchid', 'partnerKey', 'pfx', 'notifyUrl', 'spbillCreateIp']
} as const;

export const WeixinPayUpdateDtoSchema = {
    type: 'object',
    properties: {
        name: {
            type: 'string'
        },
        mchid: {
            type: 'string'
        },
        partnerKey: {
            type: 'string'
        },
        pfx: {
            type: 'string'
        },
        notifyUrl: {
            type: 'string'
        },
        spbillCreateIp: {
            type: 'string'
        }
    },
    required: ['name', 'mchid', 'partnerKey', 'notifyUrl', 'spbillCreateIp']
} as const;

export const WeixinPaySchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string'
        },
        name: {
            type: 'string'
        },
        mchid: {
            type: 'string'
        },
        partnerKey: {
            type: 'string'
        },
        pfx: {
            type: 'string'
        },
        notifyUrl: {
            type: 'string'
        },
        spbillCreateIp: {
            type: 'string'
        },
        createDate: {
            format: 'date-time',
            type: 'string',
            description: '创建时间'
        },
        updateDate: {
            format: 'date-time',
            type: 'string',
            description: '更新时间'
        }
    },
    required: ['id', 'name', 'mchid', 'partnerKey', 'pfx', 'notifyUrl', 'spbillCreateIp', 'createDate', 'updateDate']
} as const;

export const WeixinPayPaginatePageInfoSchema = {
    type: 'object',
    properties: {
        list: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/WeixinPay'
            }
        },
        count: {
            type: 'number'
        }
    },
    required: ['list', 'count']
} as const;

export const WeixinPayPaginateResponseSchema = {
    type: 'object',
    properties: {
        code: {
            type: 'number'
        },
        message: {
            type: 'string'
        },
        data: {
            '$ref': '#/components/schemas/WeixinPayPaginatePageInfo'
        }
    },
    required: ['code', 'message', 'data']
} as const;

export const WeixinPayGetResponseSchema = {
    type: 'object',
    properties: {
        code: {
            type: 'number'
        },
        message: {
            type: 'string'
        },
        data: {
            '$ref': '#/components/schemas/WeixinPay'
        }
    },
    required: ['code', 'message', 'data']
} as const;

export const WatermarkSchema = {
    type: 'object',
    properties: {
        timestamp: {
            type: 'number'
        },
        appid: {
            type: 'string'
        }
    },
    required: ['timestamp', 'appid']
} as const;

export const PhoneInfoSchema = {
    type: 'object',
    properties: {
        phoneNumber: {
            type: 'string'
        },
        purePhoneNumber: {
            type: 'string'
        },
        countryCode: {
            type: 'number'
        },
        watermark: {
            '$ref': '#/components/schemas/Watermark'
        }
    },
    required: ['phoneNumber', 'purePhoneNumber', 'countryCode', 'watermark']
} as const;

export const GetPhoneNumberResponseSchema = {
    type: 'object',
    properties: {
        code: {
            type: 'number'
        },
        data: {
            '$ref': '#/components/schemas/PhoneInfo'
        }
    },
    required: ['code', 'data']
} as const;

export const SessionInfoSchema = {
    type: 'object',
    properties: {
        openid: {
            type: 'string'
        },
        unionid: {
            type: 'string'
        },
        session_key: {
            type: 'string'
        }
    },
    required: ['openid', 'unionid', 'session_key']
} as const;

export const WeixinMiniProgramCodeToSessionResponseSchema = {
    type: 'object',
    properties: {
        code: {
            type: 'number'
        },
        data: {
            '$ref': '#/components/schemas/SessionInfo'
        }
    },
    required: ['code', 'data']
} as const;

export const AddressCreateSessionDtoSchema = {
    type: 'object',
    properties: {
        name: {
            type: 'string'
        },
        mobile: {
            type: 'string'
        },
        country: {
            type: 'number'
        },
        province: {
            type: 'number'
        },
        city: {
            type: 'number'
        },
        region: {
            type: 'number'
        },
        address: {
            type: 'string'
        },
        isDefault: {
            type: 'boolean'
        }
    },
    required: ['name', 'mobile', 'country', 'province', 'city', 'region', 'address', 'isDefault']
} as const;

export const AddressGetAllSessionResponseSchema = {
    type: 'object',
    properties: {
        code: {
            type: 'number'
        },
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Address'
            }
        }
    },
    required: ['code', 'data']
} as const;

export const AddressUpdateSessionDtoSchema = {
    type: 'object',
    properties: {
        name: {
            type: 'string'
        },
        mobile: {
            type: 'string'
        },
        country: {
            type: 'number'
        },
        province: {
            type: 'number'
        },
        city: {
            type: 'number'
        },
        region: {
            type: 'number'
        },
        address: {
            type: 'string'
        },
        isDefault: {
            type: 'boolean'
        }
    },
    required: ['name', 'mobile', 'country', 'province', 'city', 'region', 'address', 'isDefault']
} as const;

export const AddressGetResponseSchema = {
    type: 'object',
    properties: {
        code: {
            type: 'number'
        },
        data: {
            '$ref': '#/components/schemas/Address'
        }
    },
    required: ['code', 'data']
} as const;

export const SmsTestDtoSchema = {
    type: 'object',
    properties: {
        phone: {
            type: 'string'
        },
        code: {
            type: 'string'
        }
    },
    required: ['phone', 'code']
} as const;

export const SettingSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string'
        },
        key: {
            type: 'string'
        },
        value: {
            type: 'string'
        },
        createDate: {
            format: 'date-time',
            type: 'string',
            description: '创建时间'
        },
        updateDate: {
            format: 'date-time',
            type: 'string',
            description: '更新时间'
        }
    },
    required: ['id', 'key', 'value', 'createDate', 'updateDate']
} as const;

export const SettingGetItemsSuccessResponseSchema = {
    type: 'object',
    properties: {
        code: {
            type: 'number'
        },
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Setting'
            }
        }
    },
    required: ['code', 'data']
} as const;

export const StoreItemSchema = {
    type: 'object',
    properties: {
        key: {
            type: 'string'
        },
        value: {
            type: 'string'
        }
    },
    required: ['key', 'value']
} as const;

export const SettingSetDtoSchema = {
    type: 'object',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/StoreItem'
            }
        }
    },
    required: ['data']
} as const;

export const FileUploadDtoSchema = {
    type: 'object',
    properties: {
        file: {
            type: 'string',
            format: 'binary'
        }
    },
    required: ['file']
} as const;

export const BufferSchema = {
    type: 'object',
    properties: {}
} as const;

export const FileBufferSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string'
        },
        buffer: {
            description: 'buffer',
            allOf: [
                {
                    '$ref': '#/components/schemas/Buffer'
                }
            ]
        },
        createDate: {
            format: 'date-time',
            type: 'string',
            description: '创建时间'
        },
        updateDate: {
            format: 'date-time',
            type: 'string',
            description: '更新时间'
        }
    },
    required: ['id', 'buffer', 'createDate', 'updateDate']
} as const;

export const FileSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string'
        },
        name: {
            type: 'string',
            description: '名称'
        },
        originFileName: {
            type: 'string',
            description: '文件原名'
        },
        ext: {
            type: 'string',
            description: '扩展名'
        },
        size: {
            type: 'number',
            description: '空间大小'
        },
        content: {
            '$ref': '#/components/schemas/FileBuffer'
        },
        createDate: {
            format: 'date-time',
            type: 'string',
            description: '创建时间'
        },
        updateDate: {
            format: 'date-time',
            type: 'string',
            description: '更新时间'
        }
    },
    required: ['id', 'name', 'originFileName', 'ext', 'size', 'createDate', 'updateDate']
} as const;

export const UploadFileInfoSchema = {
    type: 'object',
    properties: {
        url: {
            type: 'string'
        },
        fileId: {
            type: 'string'
        },
        entity: {
            '$ref': '#/components/schemas/File'
        }
    },
    required: ['url', 'fileId', 'entity']
} as const;

export const FileUploadResponseSchema = {
    type: 'object',
    properties: {
        code: {
            type: 'number'
        },
        message: {
            type: 'string'
        },
        data: {
            '$ref': '#/components/schemas/UploadFileInfo'
        }
    },
    required: ['code', 'message', 'data']
} as const;

export const FilesUploadDtoSchema = {
    type: 'object',
    properties: {
        files: {
            type: 'array',
            items: {
                type: 'string',
                format: 'binary'
            }
        }
    },
    required: ['files']
} as const;

export const FileGetResponseSchema = {
    type: 'object',
    properties: {
        code: {
            type: 'number'
        },
        message: {
            type: 'string'
        },
        data: {
            '$ref': '#/components/schemas/File'
        }
    },
    required: ['code', 'message', 'data']
} as const;

export const CreateSuperAdminDtoSchema = {
    type: 'object',
    properties: {
        username: {
            type: 'string',
            description: '用户名'
        },
        password: {
            type: 'string',
            description: '密码'
        }
    },
    required: ['username', 'password']
} as const;

export const SessionGetUserResponseSchema = {
    type: 'object',
    properties: {
        code: {
            type: 'number'
        },
        data: {
            '$ref': '#/components/schemas/User'
        }
    },
    required: ['code', 'data']
} as const;

export const AccessTokenSchema = {
    type: 'object',
    properties: {
        accessToken: {
            type: 'string'
        },
        expireTime: {
            type: 'number'
        }
    },
    required: ['accessToken', 'expireTime']
} as const;

export const WeixinOfficialAccountGetAccessTokenResponseSchema = {
    type: 'object',
    properties: {
        code: {
            type: 'number'
        },
        data: {
            '$ref': '#/components/schemas/AccessToken'
        }
    },
    required: ['code', 'data']
} as const;

export const WeixinOfficialAccountGetNotifyUrlResponseSchema = {
    type: 'object',
    properties: {
        code: {
            type: 'number'
        },
        data: {
            type: 'string'
        }
    },
    required: ['code', 'data']
} as const;

export const GetJssdkSignatureDtoSchema = {
    type: 'object',
    properties: {
        debug: {
            type: 'boolean'
        },
        url: {
            type: 'string'
        },
        jsApiList: {
            type: 'array',
            items: {
                type: 'string'
            }
        }
    },
    required: ['debug', 'url', 'jsApiList']
} as const;

export const SendTemplateDtoSchema = {
    type: 'object',
    properties: {
        templateId: {
            type: 'string'
        },
        openId: {
            type: 'string'
        },
        data: {
            type: 'object'
        }
    },
    required: ['templateId', 'openId', 'data']
} as const;

export const WeixinPayCenterGetPayParamsDtoSchema = {
    type: 'object',
    properties: {
        out_trade_no: {
            type: 'string'
        },
        body: {
            type: 'string'
        },
        total_fee: {
            type: 'number'
        },
        openid: {
            type: 'string'
        }
    },
    required: ['out_trade_no', 'body', 'total_fee', 'openid']
} as const;

export const WeixinPayCenterGetPayParamsResultSchema = {
    type: 'object',
    properties: {
        appid: {
            type: 'string'
        },
        time_stamp: {
            type: 'string'
        },
        nonce_str: {
            type: 'string'
        },
        package: {
            type: 'string'
        },
        sign_type: {
            type: 'string'
        }
    },
    required: ['appid', 'time_stamp', 'nonce_str', 'package', 'sign_type']
} as const;

export const WeixinPayCenterGetPayParamsResponseSchema = {
    type: 'object',
    properties: {
        code: {
            type: 'number'
        },
        message: {
            type: 'string'
        },
        data: {
            '$ref': '#/components/schemas/WeixinPayCenterGetPayParamsResult'
        }
    },
    required: ['code', 'message', 'data']
} as const;

export const AreaResponseSchema = {
    type: 'object',
    properties: {
        code: {
            type: 'number'
        },
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Area'
            }
        }
    },
    required: ['code', 'data']
} as const;

export const TreeNodeSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'number'
        },
        parentId: {
            type: 'number'
        },
        name: {
            type: 'string'
        },
        children: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/TreeNode'
            }
        }
    },
    required: ['id', 'parentId', 'name', 'children']
} as const;

export const TreeDataResponseSchema = {
    type: 'object',
    properties: {
        code: {
            type: 'number'
        },
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/TreeNode'
            }
        }
    },
    required: ['code', 'data']
} as const;

export const ForumCommentSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string'
        },
        content: {
            type: 'string'
        },
        images: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        to: {
            '$ref': '#/components/schemas/ForumComment'
        },
        post: {
            '$ref': '#/components/schemas/ForumPost'
        },
        creator: {
            '$ref': '#/components/schemas/User'
        },
        createDate: {
            format: 'date-time',
            type: 'string',
            description: '创建时间'
        },
        updateDate: {
            format: 'date-time',
            type: 'string',
            description: '更新时间'
        }
    },
    required: ['id', 'content', 'images', 'to', 'post', 'creator', 'createDate', 'updateDate']
} as const;

export const ForumPostRelationSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string'
        },
        creator: {
            '$ref': '#/components/schemas/User'
        },
        post: {
            '$ref': '#/components/schemas/ForumPost'
        },
        type: {
            type: 'string',
            enum: ['unknown', 'zan', 'collect']
        },
        createDate: {
            format: 'date-time',
            type: 'string',
            description: '创建时间'
        },
        updateDate: {
            format: 'date-time',
            type: 'string',
            description: '更新时间'
        }
    },
    required: ['id', 'creator', 'post', 'type', 'createDate', 'updateDate']
} as const;

export const ForumPostSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string'
        },
        title: {
            type: 'string'
        },
        content: {
            type: 'string'
        },
        images: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        creator: {
            '$ref': '#/components/schemas/User'
        },
        section: {
            '$ref': '#/components/schemas/ForumSection'
        },
        comments: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ForumComment'
            }
        },
        zans: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ForumPostRelation'
            }
        },
        collects: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ForumPostRelation'
            }
        },
        createDate: {
            format: 'date-time',
            type: 'string',
            description: '创建时间'
        },
        updateDate: {
            format: 'date-time',
            type: 'string',
            description: '更新时间'
        }
    },
    required: ['id', 'title', 'content', 'images', 'creator', 'section', 'comments', 'zans', 'collects', 'createDate', 'updateDate']
} as const;

export const ForumSectionSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string'
        },
        name: {
            type: 'string'
        },
        desc: {
            type: 'string'
        },
        creator: {
            '$ref': '#/components/schemas/User'
        },
        posts: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ForumPost'
            }
        },
        createDate: {
            format: 'date-time',
            type: 'string',
            description: '创建时间'
        },
        updateDate: {
            format: 'date-time',
            type: 'string',
            description: '更新时间'
        }
    },
    required: ['id', 'name', 'desc', 'creator', 'posts', 'createDate', 'updateDate']
} as const;

export const ForumSectionGetAllResponseSchema = {
    type: 'object',
    properties: {
        code: {
            type: 'number'
        },
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ForumSection'
            }
        }
    },
    required: ['code', 'data']
} as const;

export const ForumSectionGetResponseSchema = {
    type: 'object',
    properties: {
        code: {
            type: 'number'
        },
        data: {
            '$ref': '#/components/schemas/ForumSection'
        }
    },
    required: ['code', 'data']
} as const;

export const ForumSectionCreateDtoSchema = {
    type: 'object',
    properties: {
        name: {
            type: 'string'
        },
        desc: {
            type: 'string'
        }
    },
    required: ['name', 'desc']
} as const;

export const ForumSectionUpdateDtoSchema = {
    type: 'object',
    properties: {
        name: {
            type: 'string'
        },
        desc: {
            type: 'string'
        }
    },
    required: ['name', 'desc']
} as const;

export const ForumSectionPaginatePageSchema = {
    type: 'object',
    properties: {
        list: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ForumSection'
            }
        },
        count: {
            type: 'number'
        }
    },
    required: ['list', 'count']
} as const;

export const ForumSectionPaginateResponseSchema = {
    type: 'object',
    properties: {
        code: {
            type: 'number'
        },
        data: {
            '$ref': '#/components/schemas/ForumSectionPaginatePage'
        }
    },
    required: ['code', 'data']
} as const;

export const ForumPostCreateDtoSchema = {
    type: 'object',
    properties: {
        title: {
            type: 'string'
        },
        content: {
            type: 'string'
        },
        images: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        sectionId: {
            type: 'string'
        }
    },
    required: ['title', 'content', 'images', 'sectionId']
} as const;

export const ForumPostUpdateDtoSchema = {
    type: 'object',
    properties: {
        title: {
            type: 'string'
        },
        content: {
            type: 'string'
        },
        images: {
            type: 'array',
            items: {
                type: 'string'
            }
        }
    },
    required: ['title', 'content', 'images']
} as const;

export const ForumPostGetAllResponseSchema = {
    type: 'object',
    properties: {
        code: {
            type: 'number'
        },
        data: {
            '$ref': '#/components/schemas/ForumPost'
        }
    },
    required: ['code', 'data']
} as const;

export const ForumPostGetResponseSchema = {
    type: 'object',
    properties: {
        code: {
            type: 'number'
        },
        data: {
            '$ref': '#/components/schemas/ForumPost'
        }
    },
    required: ['code', 'data']
} as const;

export const ForumPostPaginatePageSchema = {
    type: 'object',
    properties: {
        list: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ForumPost'
            }
        },
        count: {
            type: 'number'
        }
    },
    required: ['list', 'count']
} as const;

export const ForumPostPaginateResponseSchema = {
    type: 'object',
    properties: {
        code: {
            type: 'number'
        },
        data: {
            '$ref': '#/components/schemas/ForumPostPaginatePage'
        }
    },
    required: ['code', 'data']
} as const;

export const ForumPostGetCountResponseSchema = {
    type: 'object',
    properties: {
        code: {
            type: 'number'
        },
        data: {
            type: 'number'
        }
    },
    required: ['code', 'data']
} as const;

export const ForumCommentCreateDtoSchema = {
    type: 'object',
    properties: {
        content: {
            type: 'string'
        },
        postId: {
            type: 'string'
        },
        images: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        toCommentId: {
            type: 'string'
        }
    },
    required: ['content', 'postId', 'images']
} as const;

export const ForumCommentGetAllResponseSchema = {
    type: 'object',
    properties: {
        code: {
            type: 'number'
        },
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ForumComment'
            }
        }
    },
    required: ['code', 'data']
} as const;

export const ForumCommentGetResponseSchema = {
    type: 'object',
    properties: {
        code: {
            type: 'number'
        },
        data: {
            '$ref': '#/components/schemas/ForumComment'
        }
    },
    required: ['code', 'data']
} as const;

export const ForumCommentPaginatePageSchema = {
    type: 'object',
    properties: {
        list: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ForumComment'
            }
        },
        count: {
            type: 'number'
        }
    },
    required: ['list', 'count']
} as const;

export const ForumCommentPaginateResponseSchema = {
    type: 'object',
    properties: {
        code: {
            type: 'number'
        },
        data: {
            '$ref': '#/components/schemas/ForumCommentPaginatePage'
        }
    },
    required: ['code', 'data']
} as const;

export const ForumCommentGetCountResponseSchema = {
    type: 'object',
    properties: {
        code: {
            type: 'number'
        },
        data: {
            type: 'number'
        }
    },
    required: ['code', 'data']
} as const;

export const ForumPostRelationCreateDtoSchema = {
    type: 'object',
    properties: {
        type: {
            type: 'string',
            enum: ['unknown', 'zan', 'collect']
        },
        postId: {
            type: 'string'
        }
    },
    required: ['type', 'postId']
} as const;

export const ForumPostRelationGetAllResponseSchema = {
    type: 'object',
    properties: {
        code: {
            type: 'number'
        },
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ForumPostRelation'
            }
        }
    },
    required: ['code', 'data']
} as const;

export const ForumPostRelationPaginatePageSchema = {
    type: 'object',
    properties: {
        list: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ForumPostRelation'
            }
        },
        count: {
            type: 'number'
        }
    },
    required: ['list', 'count']
} as const;

export const ForumPostRelationPaginateResponseSchema = {
    type: 'object',
    properties: {
        code: {
            type: 'number'
        },
        data: {
            '$ref': '#/components/schemas/ForumPostRelationPaginatePage'
        }
    },
    required: ['code', 'data']
} as const;

export const ForumPostRelationGetCountResponseSchema = {
    type: 'object',
    properties: {
        code: {
            type: 'number'
        },
        data: {
            type: 'number'
        }
    },
    required: ['code', 'data']
} as const;

export const MallGoodCreateDtoSchema = {
    type: 'object',
    properties: {
        title: {
            type: 'string'
        },
        desc: {
            type: 'string'
        },
        groupId: {
            type: 'string'
        },
        headimg: {
            type: 'string'
        },
        price: {
            type: 'number'
        },
        images: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        detail: {
            type: 'string'
        },
        shopId: {
            type: 'string'
        }
    },
    required: ['title', 'desc', 'groupId', 'headimg', 'price', 'images', 'detail', 'shopId']
} as const;

export const MallGoodUpdateDtoSchema = {
    type: 'object',
    properties: {
        title: {
            type: 'string'
        },
        desc: {
            type: 'string'
        },
        groupId: {
            type: 'string'
        },
        headimg: {
            type: 'string'
        },
        price: {
            type: 'number'
        },
        images: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        detail: {
            type: 'string'
        }
    },
    required: ['title', 'desc', 'groupId', 'headimg', 'price', 'images', 'detail']
} as const;

export const MallGoodGroupSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string'
        },
        name: {
            type: 'string'
        },
        headimg: {
            type: 'string'
        },
        parent: {
            '$ref': '#/components/schemas/MallGoodGroup'
        },
        children: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/MallGoodGroup'
            }
        },
        creator: {
            '$ref': '#/components/schemas/User'
        },
        createDate: {
            format: 'date-time',
            type: 'string',
            description: '创建时间'
        },
        updateDate: {
            format: 'date-time',
            type: 'string',
            description: '更新时间'
        }
    },
    required: ['id', 'name', 'headimg', 'parent', 'children', 'creator', 'createDate', 'updateDate']
} as const;

export const MallShopSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string'
        },
        name: {
            type: 'string'
        },
        headimg: {
            type: 'string'
        },
        desc: {
            type: 'string'
        },
        creator: {
            '$ref': '#/components/schemas/User'
        },
        createDate: {
            format: 'date-time',
            type: 'string',
            description: '创建时间'
        },
        updateDate: {
            format: 'date-time',
            type: 'string',
            description: '更新时间'
        }
    },
    required: ['id', 'name', 'headimg', 'desc', 'creator', 'createDate', 'updateDate']
} as const;

export const MallGoodSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string'
        },
        title: {
            type: 'string'
        },
        desc: {
            type: 'string'
        },
        group: {
            '$ref': '#/components/schemas/MallGoodGroup'
        },
        headimg: {
            type: 'string'
        },
        price: {
            type: 'number',
            description: '单位分'
        },
        images: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        detail: {
            type: 'string'
        },
        shop: {
            '$ref': '#/components/schemas/MallShop'
        },
        creator: {
            '$ref': '#/components/schemas/User'
        },
        createDate: {
            format: 'date-time',
            type: 'string',
            description: '创建时间'
        },
        updateDate: {
            format: 'date-time',
            type: 'string',
            description: '更新时间'
        }
    },
    required: ['id', 'title', 'desc', 'group', 'headimg', 'price', 'images', 'detail', 'shop', 'creator', 'createDate', 'updateDate']
} as const;

export const MallGoodPaginatePageSchema = {
    type: 'object',
    properties: {
        count: {
            type: 'number'
        },
        list: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/MallGood'
            }
        }
    },
    required: ['count', 'list']
} as const;

export const MallGoodPaginateResponseSchema = {
    type: 'object',
    properties: {
        code: {
            type: 'number'
        },
        message: {
            type: 'string'
        },
        data: {
            '$ref': '#/components/schemas/MallGoodPaginatePage'
        }
    },
    required: ['code', 'message', 'data']
} as const;

export const MallGoodGetResponseSchema = {
    type: 'object',
    properties: {
        code: {
            type: 'number'
        },
        message: {
            type: 'string'
        },
        data: {
            '$ref': '#/components/schemas/MallGood'
        }
    },
    required: ['code', 'message', 'data']
} as const;

export const MallGoodGetAllResponseSchema = {
    type: 'object',
    properties: {}
} as const;

export const MallCartCreateDtoSchema = {
    type: 'object',
    properties: {
        goodId: {
            type: 'string'
        },
        count: {
            type: 'number'
        }
    },
    required: ['goodId', 'count']
} as const;

export const MallCartBatchUpdateDtoSchema = {
    type: 'object',
    properties: {
        ids: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        checked: {
            type: 'boolean'
        }
    },
    required: ['ids']
} as const;

export const MallCartUpdateDtoSchema = {
    type: 'object',
    properties: {
        count: {
            type: 'number'
        },
        checked: {
            type: 'boolean'
        }
    }
} as const;

export const MallCartSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string'
        },
        user: {
            '$ref': '#/components/schemas/User'
        },
        good: {
            '$ref': '#/components/schemas/MallGood'
        },
        count: {
            type: 'number'
        },
        checked: {
            type: 'boolean'
        },
        createDate: {
            format: 'date-time',
            type: 'string',
            description: '创建时间'
        },
        updateDate: {
            format: 'date-time',
            type: 'string',
            description: '更新时间'
        }
    },
    required: ['id', 'user', 'good', 'count', 'checked', 'createDate', 'updateDate']
} as const;

export const MallCartGetAllResponseSchema = {
    type: 'object',
    properties: {
        code: {
            type: 'number'
        },
        message: {
            type: 'string'
        },
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/MallCart'
            }
        }
    },
    required: ['code', 'message', 'data']
} as const;

export const GoodInfoSchema = {
    type: 'object',
    properties: {
        goodId: {
            type: 'string'
        },
        count: {
            type: 'number'
        }
    },
    required: ['goodId', 'count']
} as const;

export const MallOrderCreateDtoSchema = {
    type: 'object',
    properties: {
        addressId: {
            type: 'string'
        },
        goods: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GoodInfo'
            }
        }
    },
    required: ['addressId', 'goods']
} as const;

export const MallOrderGoodSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string'
        },
        order: {
            '$ref': '#/components/schemas/MallOrder'
        },
        good: {
            '$ref': '#/components/schemas/MallGood'
        },
        count: {
            type: 'number'
        },
        price: {
            type: 'number'
        },
        createDate: {
            format: 'date-time',
            type: 'string',
            description: '创建时间'
        },
        updateDate: {
            format: 'date-time',
            type: 'string',
            description: '更新时间'
        }
    },
    required: ['id', 'order', 'good', 'count', 'price', 'createDate', 'updateDate']
} as const;

export const MallOrderSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string'
        },
        creator: {
            '$ref': '#/components/schemas/User'
        },
        address: {
            '$ref': '#/components/schemas/Address'
        },
        goods: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/MallOrderGood'
            }
        },
        status: {
            type: 'number'
        },
        price: {
            type: 'number'
        },
        createDate: {
            format: 'date-time',
            type: 'string',
            description: '创建时间'
        },
        updateDate: {
            format: 'date-time',
            type: 'string',
            description: '更新时间'
        }
    },
    required: ['id', 'creator', 'address', 'goods', 'status', 'price', 'createDate', 'updateDate']
} as const;

export const MallOrderPageWidthCursorPageInfoSchema = {
    type: 'object',
    properties: {
        list: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/MallOrder'
            }
        },
        count: {
            type: 'number'
        }
    },
    required: ['list', 'count']
} as const;

export const MallOrderPageWidthCursorResponseSchema = {
    type: 'object',
    properties: {
        code: {
            type: 'number'
        },
        message: {
            type: 'string'
        },
        data: {
            '$ref': '#/components/schemas/MallOrderPageWidthCursorPageInfo'
        }
    },
    required: ['code', 'message', 'data']
} as const;

export const MallOrderPaginatePageInfoSchema = {
    type: 'object',
    properties: {
        list: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/MallOrder'
            }
        },
        count: {
            type: 'number'
        }
    },
    required: ['list', 'count']
} as const;

export const MallOrderPaginateResponseSchema = {
    type: 'object',
    properties: {
        code: {
            type: 'number'
        },
        message: {
            type: 'string'
        },
        data: {
            '$ref': '#/components/schemas/MallOrderPaginatePageInfo'
        }
    },
    required: ['code', 'message', 'data']
} as const;

export const MallOrderGetResponseSchema = {
    type: 'object',
    properties: {
        code: {
            type: 'number'
        },
        message: {
            type: 'string'
        },
        data: {
            '$ref': '#/components/schemas/MallOrder'
        }
    },
    required: ['code', 'message', 'data']
} as const;

export const MallGoodCommentCreateDtoSchema = {
    type: 'object',
    properties: {
        goodId: {
            type: 'string'
        },
        content: {
            type: 'string'
        },
        images: {
            type: 'array',
            items: {
                type: 'string'
            }
        }
    },
    required: ['goodId', 'content', 'images']
} as const;

export const MallGoodCommentSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string'
        },
        creator: {
            '$ref': '#/components/schemas/User'
        },
        good: {
            '$ref': '#/components/schemas/MallGood'
        },
        content: {
            type: 'string'
        },
        images: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        createDate: {
            format: 'date-time',
            type: 'string',
            description: '创建时间'
        },
        updateDate: {
            format: 'date-time',
            type: 'string',
            description: '更新时间'
        }
    },
    required: ['id', 'creator', 'good', 'content', 'images', 'createDate', 'updateDate']
} as const;

export const MallGoodCommentPaginateWidthCursorPageInfoSchema = {
    type: 'object',
    properties: {
        list: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/MallGoodComment'
            }
        },
        count: {
            type: 'number'
        }
    },
    required: ['list', 'count']
} as const;

export const MallGoodCommentPaginateWidthCursorResponseSchema = {
    type: 'object',
    properties: {
        code: {
            type: 'number'
        },
        message: {
            type: 'string'
        },
        data: {
            '$ref': '#/components/schemas/MallGoodCommentPaginateWidthCursorPageInfo'
        }
    },
    required: ['code', 'message', 'data']
} as const;

export const MallGoodCommentPaginatePageInfoSchema = {
    type: 'object',
    properties: {
        list: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/MallGoodComment'
            }
        },
        count: {
            type: 'number'
        }
    },
    required: ['list', 'count']
} as const;

export const MallGoodCommentPaginateResponseSchema = {
    type: 'object',
    properties: {
        code: {
            type: 'number'
        },
        message: {
            type: 'string'
        },
        data: {
            '$ref': '#/components/schemas/MallGoodCommentPaginatePageInfo'
        }
    },
    required: ['code', 'message', 'data']
} as const;

export const MallGoodRelationCreateDtoSchema = {
    type: 'object',
    properties: {
        goodId: {
            type: 'string'
        },
        type: {
            type: 'string',
            enum: ['unknown', 'collect']
        }
    },
    required: ['goodId', 'type']
} as const;

export const MallGoodRelationSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string'
        },
        user: {
            '$ref': '#/components/schemas/User'
        },
        good: {
            '$ref': '#/components/schemas/MallGood'
        },
        type: {
            type: 'string',
            enum: ['unknown', 'collect']
        },
        createDate: {
            format: 'date-time',
            type: 'string',
            description: '创建时间'
        },
        updateDate: {
            format: 'date-time',
            type: 'string',
            description: '更新时间'
        }
    },
    required: ['id', 'user', 'good', 'type', 'createDate', 'updateDate']
} as const;

export const MallGoodRelationGetResponseSchema = {
    type: 'object',
    properties: {
        code: {
            type: 'number'
        },
        message: {
            type: 'string'
        },
        data: {
            '$ref': '#/components/schemas/MallGoodRelation'
        }
    },
    required: ['code', 'message', 'data']
} as const;

export const MallGoodTagCreateDtoSchema = {
    type: 'object',
    properties: {
        name: {
            type: 'string'
        },
        desc: {
            type: 'string'
        }
    },
    required: ['name', 'desc']
} as const;

export const MallGoodTagUpdateDtoSchema = {
    type: 'object',
    properties: {
        desc: {
            type: 'string'
        }
    },
    required: ['desc']
} as const;

export const MallGoodTagSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string'
        },
        name: {
            type: 'string'
        },
        desc: {
            type: 'string'
        },
        createDate: {
            format: 'date-time',
            type: 'string',
            description: '创建时间'
        },
        updateDate: {
            format: 'date-time',
            type: 'string',
            description: '更新时间'
        }
    },
    required: ['id', 'name', 'desc', 'createDate', 'updateDate']
} as const;

export const MallGoodTagPaginatePageInfoSchema = {
    type: 'object',
    properties: {
        list: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/MallGoodTag'
            }
        },
        count: {
            type: 'number'
        }
    },
    required: ['list', 'count']
} as const;

export const MallGoodTagPaginateResponseSchema = {
    type: 'object',
    properties: {
        code: {
            type: 'number'
        },
        message: {
            type: 'string'
        },
        data: {
            '$ref': '#/components/schemas/MallGoodTagPaginatePageInfo'
        }
    },
    required: ['code', 'message', 'data']
} as const;

export const MallGoodTagGetResponseSchema = {
    type: 'object',
    properties: {
        code: {
            type: 'number'
        },
        message: {
            type: 'string'
        },
        data: {
            '$ref': '#/components/schemas/MallGoodTag'
        }
    },
    required: ['code', 'message', 'data']
} as const;

export const MallGoodTabGetAllResponseSchema = {
    type: 'object',
    properties: {
        code: {
            type: 'number'
        },
        message: {
            type: 'string'
        },
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/MallGoodTag'
            }
        }
    },
    required: ['code', 'message', 'data']
} as const;

export const MallShopCreateDtoSchema = {
    type: 'object',
    properties: {
        name: {
            type: 'string'
        },
        desc: {
            type: 'string'
        },
        headimg: {
            type: 'string'
        }
    },
    required: ['name', 'desc', 'headimg']
} as const;

export const MallShopUpdateDtoSchema = {
    type: 'object',
    properties: {
        name: {
            type: 'string'
        },
        desc: {
            type: 'string'
        },
        headimg: {
            type: 'string'
        }
    },
    required: ['name', 'desc', 'headimg']
} as const;

export const MallShopPaginatePageSchema = {
    type: 'object',
    properties: {
        count: {
            type: 'number'
        },
        list: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/MallShop'
            }
        }
    },
    required: ['count', 'list']
} as const;

export const MallShopPaginateResponseSchema = {
    type: 'object',
    properties: {
        code: {
            type: 'number'
        },
        message: {
            type: 'string'
        },
        data: {
            '$ref': '#/components/schemas/MallShopPaginatePage'
        }
    },
    required: ['code', 'message', 'data']
} as const;

export const MallShopGetResponseSchema = {
    type: 'object',
    properties: {
        code: {
            type: 'number'
        },
        message: {
            type: 'string'
        },
        data: {
            '$ref': '#/components/schemas/MallShop'
        }
    },
    required: ['code', 'message', 'data']
} as const;

export const MallShopGetAllResponseSchema = {
    type: 'object',
    properties: {
        code: {
            type: 'number'
        },
        message: {
            type: 'string'
        },
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/MallShop'
            }
        }
    },
    required: ['code', 'message', 'data']
} as const;

export const MallGoodGroupCreateDtoSchema = {
    type: 'object',
    properties: {
        name: {
            type: 'string'
        },
        headimg: {
            type: 'string'
        },
        parentId: {
            type: 'string'
        }
    },
    required: ['name', 'headimg']
} as const;

export const MallGoodGroupUpdateDtoSchema = {
    type: 'object',
    properties: {
        name: {
            type: 'string'
        },
        headimg: {
            type: 'string'
        }
    },
    required: ['name', 'headimg']
} as const;

export const MallGoodGroupGetTreeResponseSchema = {
    type: 'object',
    properties: {
        code: {
            type: 'number'
        },
        message: {
            type: 'string'
        },
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/MallGoodGroup'
            }
        }
    },
    required: ['code', 'message', 'data']
} as const;

export const MallGoodGroupGetResponseSchema = {
    type: 'object',
    properties: {
        code: {
            type: 'number'
        },
        message: {
            type: 'string'
        },
        data: {
            '$ref': '#/components/schemas/MallGoodGroup'
        }
    },
    required: ['code', 'message', 'data']
} as const;

export const MallGoodGroupGetAllResponseSchema = {
    type: 'object',
    properties: {
        code: {
            type: 'number'
        },
        message: {
            type: 'string'
        },
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/MallGoodGroup'
            }
        }
    },
    required: ['code', 'message', 'data']
} as const;

export const ChatMessageTypeEnumSchema = {
    type: 'string',
    enum: ['unknown', 'text']
} as const;

export const ChatMessageCreateDtoSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string'
        },
        type: {
            '$ref': '#/components/schemas/ChatMessageTypeEnum'
        },
        content: {
            type: 'string'
        },
        contactsId: {
            type: 'string'
        }
    },
    required: ['id', 'type', 'content', 'contactsId']
} as const;

export const ChatContactsTypeEnumSchema = {
    type: 'string',
    enum: ['unknown', 'waiting_verification', 'can_pass', 'passed', 'refuse', 'refused']
} as const;

export const ChatContactsSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string'
        },
        contacts: {
            '$ref': '#/components/schemas/User'
        },
        creator: {
            '$ref': '#/components/schemas/User'
        },
        status: {
            '$ref': '#/components/schemas/ChatContactsTypeEnum'
        },
        createDate: {
            format: 'date-time',
            type: 'string',
            description: '创建时间'
        },
        updateDate: {
            format: 'date-time',
            type: 'string',
            description: '更新时间'
        }
    },
    required: ['id', 'contacts', 'creator', 'status', 'createDate', 'updateDate']
} as const;

export const ChatMessageSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string'
        },
        contacts: {
            '$ref': '#/components/schemas/ChatContacts'
        },
        type: {
            '$ref': '#/components/schemas/ChatMessageTypeEnum'
        },
        content: {
            type: 'string'
        },
        creator: {
            '$ref': '#/components/schemas/User'
        },
        createDate: {
            format: 'date-time',
            type: 'string',
            description: '创建时间'
        },
        updateDate: {
            format: 'date-time',
            type: 'string',
            description: '更新时间'
        }
    },
    required: ['id', 'contacts', 'type', 'content', 'creator', 'createDate', 'updateDate']
} as const;

export const ChatMessageGetResponseSchema = {
    type: 'object',
    properties: {
        code: {
            type: 'number'
        },
        message: {
            type: 'string'
        },
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ChatMessage'
            }
        }
    },
    required: ['code', 'message', 'data']
} as const;

export const ChatSessionCreateDtoSchema = {
    type: 'object',
    properties: {
        contactsId: {
            type: 'string'
        }
    },
    required: ['contactsId']
} as const;

export const ChatSessionSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string'
        },
        contacts: {
            '$ref': '#/components/schemas/ChatContacts'
        },
        creator: {
            '$ref': '#/components/schemas/User'
        },
        createDate: {
            format: 'date-time',
            type: 'string',
            description: '创建时间'
        },
        updateDate: {
            format: 'date-time',
            type: 'string',
            description: '更新时间'
        }
    },
    required: ['id', 'contacts', 'creator', 'createDate', 'updateDate']
} as const;

export const ChatSessionCreateResponseSchema = {
    type: 'object',
    properties: {
        code: {
            type: 'number'
        },
        message: {
            type: 'string'
        },
        data: {
            '$ref': '#/components/schemas/ChatSession'
        }
    },
    required: ['code', 'message', 'data']
} as const;

export const ChatSessionGetResponseSchema = {
    type: 'object',
    properties: {
        code: {
            type: 'number'
        },
        message: {
            type: 'string'
        },
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ChatSession'
            }
        }
    },
    required: ['code', 'message', 'data']
} as const;

export const ChatContactsCreateDtoSchema = {
    type: 'object',
    properties: {
        contactsId: {
            type: 'string'
        }
    },
    required: ['contactsId']
} as const;

export const ChatContactsUpdateDtoSchema = {
    type: 'object',
    properties: {
        status: {
            type: 'string',
            enum: ['unknown', 'waiting_verification', 'can_pass', 'passed', 'refuse', 'refused']
        }
    },
    required: ['status']
} as const;

export const ChatContactsGetResponseSchema = {
    type: 'object',
    properties: {
        code: {
            type: 'number'
        },
        message: {
            type: 'string'
        },
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ChatContacts'
            }
        }
    },
    required: ['code', 'message', 'data']
} as const;

export const CreateAiBaiduAccountDtoSchema = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            description: '名称'
        },
        accessKey: {
            type: 'string',
            description: 'Access Key'
        },
        secretKey: {
            type: 'string',
            description: 'Secret Key'
        }
    },
    required: ['name', 'accessKey', 'secretKey']
} as const;

export const AiBaiduAccountSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string'
        },
        accessKey: {
            type: 'string',
            description: 'Access Key'
        },
        name: {
            type: 'string',
            description: '名称'
        },
        secretKey: {
            type: 'string',
            description: 'Secret Key'
        },
        creator: {
            '$ref': '#/components/schemas/User'
        },
        createDate: {
            format: 'date-time',
            type: 'string',
            description: '创建时间'
        },
        updateDate: {
            format: 'date-time',
            type: 'string',
            description: '更新时间'
        }
    },
    required: ['id', 'accessKey', 'name', 'secretKey', 'creator', 'createDate', 'updateDate']
} as const;

export const AiBaiduAccountGetAllResponseSchema = {
    type: 'object',
    properties: {
        code: {
            type: 'number'
        },
        message: {
            type: 'string'
        },
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AiBaiduAccount'
            }
        }
    },
    required: ['code', 'message', 'data']
} as const;

export const AiBaiduAccountPaginatePageSchema = {
    type: 'object',
    properties: {
        count: {
            type: 'number'
        },
        list: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AiBaiduAccount'
            }
        }
    },
    required: ['count', 'list']
} as const;

export const AiBaiduAccountPaginateResponseSchema = {
    type: 'object',
    properties: {
        code: {
            type: 'number'
        },
        message: {
            type: 'string'
        },
        data: {
            '$ref': '#/components/schemas/AiBaiduAccountPaginatePage'
        }
    },
    required: ['code', 'message', 'data']
} as const;

export const AiBaiduAccountGetResponseSchema = {
    type: 'object',
    properties: {
        code: {
            type: 'number'
        },
        message: {
            type: 'string'
        },
        data: {
            '$ref': '#/components/schemas/AiBaiduAccount'
        }
    },
    required: ['code', 'message', 'data']
} as const;

export const UpdateAiBaiduAccountDtoSchema = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            description: '名称'
        },
        accessKey: {
            type: 'string',
            description: 'Access Key'
        },
        secretKey: {
            type: 'string',
            description: 'Secret Key'
        }
    }
} as const;

export const CreateAiBaiduServiceDtoSchema = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            description: '服务名称'
        },
        endpoint: {
            type: 'string',
            description: '接口endpoint'
        },
        path: {
            type: 'string',
            description: '接口path'
        },
        typeId: {
            type: 'string',
            description: '服务类型'
        }
    },
    required: ['name', 'typeId']
} as const;

export const AiServiceTypeSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string'
        },
        name: {
            type: 'string',
            description: '服务类型名称'
        },
        value: {
            type: 'string',
            description: '值'
        },
        createDate: {
            format: 'date-time',
            type: 'string',
            description: '创建时间'
        },
        updateDate: {
            format: 'date-time',
            type: 'string',
            description: '更新时间'
        }
    },
    required: ['id', 'name', 'value', 'createDate', 'updateDate']
} as const;

export const AiBaiduServiceSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string'
        },
        name: {
            type: 'string',
            description: '服务名称'
        },
        endpoint: {
            type: 'string',
            description: '接口endpoint'
        },
        path: {
            type: 'string',
            description: '接口path'
        },
        type: {
            '$ref': '#/components/schemas/AiServiceType'
        },
        creator: {
            '$ref': '#/components/schemas/User'
        },
        createDate: {
            format: 'date-time',
            type: 'string',
            description: '创建时间'
        },
        updateDate: {
            format: 'date-time',
            type: 'string',
            description: '更新时间'
        }
    },
    required: ['id', 'name', 'endpoint', 'path', 'type', 'creator', 'createDate', 'updateDate']
} as const;

export const AiBaiduServiceGetAllResponseSchema = {
    type: 'object',
    properties: {
        code: {
            type: 'number'
        },
        message: {
            type: 'string'
        },
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AiBaiduService'
            }
        }
    },
    required: ['code', 'message', 'data']
} as const;

export const AiBaiduServicePaginatePageSchema = {
    type: 'object',
    properties: {
        count: {
            type: 'number'
        },
        list: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AiBaiduService'
            }
        }
    },
    required: ['count', 'list']
} as const;

export const AiBaiduServicePaginateResponseSchema = {
    type: 'object',
    properties: {
        code: {
            type: 'number'
        },
        message: {
            type: 'string'
        },
        data: {
            '$ref': '#/components/schemas/AiBaiduServicePaginatePage'
        }
    },
    required: ['code', 'message', 'data']
} as const;

export const AiBaiduServiceGetResponseSchema = {
    type: 'object',
    properties: {
        code: {
            type: 'number'
        },
        message: {
            type: 'string'
        },
        data: {
            '$ref': '#/components/schemas/AiBaiduService'
        }
    },
    required: ['code', 'message', 'data']
} as const;

export const UpdateAiBaiduServiceDtoSchema = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            description: '服务名称'
        },
        endpoint: {
            type: 'string',
            description: '接口endpoint'
        },
        path: {
            type: 'string',
            description: '接口path'
        },
        typeId: {
            type: 'string',
            description: '服务类型'
        }
    }
} as const;

export const CreateAiBaiduSessionDtoSchema = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            description: '名称'
        },
        accountId: {
            type: 'string',
            description: '账号'
        },
        serviceId: {
            type: 'string',
            description: '服务'
        }
    },
    required: ['name', 'accountId', 'serviceId']
} as const;

export const AiBaiduSessionSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string'
        },
        name: {
            type: 'string',
            description: '会话名称'
        },
        account: {
            '$ref': '#/components/schemas/AiBaiduAccount'
        },
        service: {
            '$ref': '#/components/schemas/AiBaiduService'
        },
        creator: {
            '$ref': '#/components/schemas/User'
        },
        createDate: {
            format: 'date-time',
            type: 'string',
            description: '创建时间'
        },
        updateDate: {
            format: 'date-time',
            type: 'string',
            description: '更新时间'
        }
    },
    required: ['id', 'name', 'account', 'service', 'creator', 'createDate', 'updateDate']
} as const;

export const AiBaiduSessionGetAllResponseSchema = {
    type: 'object',
    properties: {
        code: {
            type: 'number'
        },
        message: {
            type: 'string'
        },
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AiBaiduSession'
            }
        }
    },
    required: ['code', 'message', 'data']
} as const;

export const AiBaiduSessionPaginatePageSchema = {
    type: 'object',
    properties: {
        count: {
            type: 'number'
        },
        list: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AiBaiduSession'
            }
        }
    },
    required: ['count', 'list']
} as const;

export const AiBaiduSessionPaginateResponseSchema = {
    type: 'object',
    properties: {
        code: {
            type: 'number'
        },
        message: {
            type: 'string'
        },
        data: {
            '$ref': '#/components/schemas/AiBaiduSessionPaginatePage'
        }
    },
    required: ['code', 'message', 'data']
} as const;

export const AiBaiduSessionGetResponseSchema = {
    type: 'object',
    properties: {
        code: {
            type: 'number'
        },
        message: {
            type: 'string'
        },
        data: {
            '$ref': '#/components/schemas/AiBaiduSession'
        }
    },
    required: ['code', 'message', 'data']
} as const;

export const UpdateAiBaiduSessionDtoSchema = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            description: '名称'
        },
        accountId: {
            type: 'string',
            description: '账号'
        },
        serviceId: {
            type: 'string',
            description: '服务'
        }
    }
} as const;

export const CreateAiBaiduMessageDtoSchema = {
    type: 'object',
    properties: {
        content: {
            type: 'string',
            description: '消息内容'
        },
        sessionId: {
            type: 'string',
            description: '会话Id'
        }
    },
    required: ['content', 'sessionId']
} as const;

export const AiBaiduMessageSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string'
        },
        role: {
            type: 'string',
            description: 'role'
        },
        content: {
            type: 'string',
            description: 'content'
        },
        qid: {
            type: 'string',
            description: 'queueId'
        },
        status: {
            type: 'string',
            description: '状态'
        },
        session: {
            '$ref': '#/components/schemas/AiBaiduSession'
        },
        createDate: {
            format: 'date-time',
            type: 'string',
            description: '创建时间'
        },
        updateDate: {
            format: 'date-time',
            type: 'string',
            description: '更新时间'
        }
    },
    required: ['id', 'role', 'content', 'qid', 'status', 'session', 'createDate', 'updateDate']
} as const;

export const AiBaiduAccountGetHistoryResponseSchema = {
    type: 'object',
    properties: {
        code: {
            type: 'number'
        },
        message: {
            type: 'string'
        },
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AiBaiduMessage'
            }
        }
    },
    required: ['code', 'message', 'data']
} as const;

export const BaiduOcrOperatesSchema = {
    type: 'string',
    enum: ['GeneralScenarios']
} as const;

export const BaiduGeneralScenariosTypeSchema = {
    type: 'string',
    enum: ['GeneralBasic']
} as const;

export const GeneralScenariosSchema = {
    type: 'object',
    properties: {
        type: {
            description: '识别类型',
            '$ref': '#/components/schemas/BaiduGeneralScenariosType'
        },
        fileId: {
            type: 'string',
            description: '文件'
        },
        fileNumber: {
            type: 'string',
            description: '识别文件页码'
        }
    },
    required: ['type', 'fileId', 'fileNumber']
} as const;

export const CreateAiBaiduOcrDtoSchema = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            description: '名称'
        },
        accountId: {
            type: 'string',
            description: '账号信息'
        },
        type: {
            description: '操作方法',
            '$ref': '#/components/schemas/BaiduOcrOperates'
        },
        generalScenarios: {
            '$ref': '#/components/schemas/GeneralScenarios'
        }
    },
    required: ['name', 'accountId', 'type', 'generalScenarios']
} as const;

export const AiBaiduOrcGeneralScenariosSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string'
        },
        file: {
            '$ref': '#/components/schemas/File'
        },
        fileNumber: {
            type: 'number',
            description: '识别文件页码'
        },
        type: {
            type: 'string',
            description: '图片类型'
        },
        result: {
            type: 'string',
            description: 'ocr识别结果'
        },
        createDate: {
            format: 'date-time',
            type: 'string',
            description: '创建时间'
        },
        updateDate: {
            format: 'date-time',
            type: 'string',
            description: '更新时间'
        }
    },
    required: ['id', 'file', 'fileNumber', 'type', 'result', 'createDate', 'updateDate']
} as const;

export const AiBaiduOcrSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string'
        },
        name: {
            type: 'string',
            description: 'ocr任务名称'
        },
        account: {
            '$ref': '#/components/schemas/AiBaiduAccount'
        },
        type: {
            type: 'string',
            description: '操作类型'
        },
        generalScenarios: {
            '$ref': '#/components/schemas/AiBaiduOrcGeneralScenarios'
        },
        creator: {
            '$ref': '#/components/schemas/User'
        },
        createDate: {
            format: 'date-time',
            type: 'string',
            description: '创建时间'
        },
        updateDate: {
            format: 'date-time',
            type: 'string',
            description: '更新时间'
        }
    },
    required: ['id', 'name', 'account', 'type', 'generalScenarios', 'creator', 'createDate', 'updateDate']
} as const;

export const AiBaiduOcrGetAllResponseSchema = {
    type: 'object',
    properties: {
        code: {
            type: 'number'
        },
        message: {
            type: 'string'
        },
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AiBaiduOcr'
            }
        }
    },
    required: ['code', 'message', 'data']
} as const;

export const AiBaiduOcrPaginatePageSchema = {
    type: 'object',
    properties: {
        count: {
            type: 'number'
        },
        list: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AiBaiduOcr'
            }
        }
    },
    required: ['count', 'list']
} as const;

export const AiBaiduOcrPaginateResponseSchema = {
    type: 'object',
    properties: {
        code: {
            type: 'number'
        },
        message: {
            type: 'string'
        },
        data: {
            '$ref': '#/components/schemas/AiBaiduOcrPaginatePage'
        }
    },
    required: ['code', 'message', 'data']
} as const;

export const AiBaiduOcrGetResponseSchema = {
    type: 'object',
    properties: {
        code: {
            type: 'number'
        },
        message: {
            type: 'string'
        },
        data: {
            '$ref': '#/components/schemas/AiBaiduOcr'
        }
    },
    required: ['code', 'message', 'data']
} as const;

export const CreateAiServiceTypeDtoSchema = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            description: '服务类型名称'
        },
        value: {
            type: 'string',
            description: '服务类型值'
        }
    },
    required: ['name', 'value']
} as const;

export const AiServiceTypeGetAllResponseSchema = {
    type: 'object',
    properties: {
        code: {
            type: 'number'
        },
        message: {
            type: 'string'
        },
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AiServiceType'
            }
        }
    },
    required: ['code', 'message', 'data']
} as const;

export const AiServiceTypeGetResponseSchema = {
    type: 'object',
    properties: {
        code: {
            type: 'number'
        },
        message: {
            type: 'string'
        },
        data: {
            '$ref': '#/components/schemas/AiServiceType'
        }
    },
    required: ['code', 'message', 'data']
} as const;

export const UpdateAiServiceTypeDtoSchema = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            description: '服务类型名称'
        },
        value: {
            type: 'string',
            description: '服务类型值'
        }
    }
} as const;

export const CreateAiSessionDtoSchema = {
    type: 'object',
    properties: {}
} as const;

export const UpdateAiSessionDtoSchema = {
    type: 'object',
    properties: {}
} as const;

export const CreateAiAliyunAccountDtoSchema = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            description: '名称'
        },
        accessKey: {
            type: 'string',
            description: 'Access Key'
        },
        secretKey: {
            type: 'string',
            description: 'Secret Key'
        },
        dashscopeApiKey: {
            type: 'string',
            description: 'Secret Key'
        }
    },
    required: ['name', 'accessKey', 'secretKey']
} as const;

export const AiAliyunAccountSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string'
        },
        accessKey: {
            type: 'string',
            description: 'Access Key'
        },
        name: {
            type: 'string',
            description: '名称'
        },
        secretKey: {
            type: 'string',
            description: 'Secret Key'
        },
        dashscopeApiKey: {
            type: 'string',
            description: 'Dashscope Api Key'
        },
        creator: {
            '$ref': '#/components/schemas/User'
        },
        createDate: {
            format: 'date-time',
            type: 'string',
            description: '创建时间'
        },
        updateDate: {
            format: 'date-time',
            type: 'string',
            description: '更新时间'
        }
    },
    required: ['id', 'accessKey', 'name', 'secretKey', 'dashscopeApiKey', 'creator', 'createDate', 'updateDate']
} as const;

export const AiAliyunAccountGetAllResponseSchema = {
    type: 'object',
    properties: {
        code: {
            type: 'number'
        },
        message: {
            type: 'string'
        },
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AiAliyunAccount'
            }
        }
    },
    required: ['code', 'message', 'data']
} as const;

export const AiAliyunAccountPaginatePageSchema = {
    type: 'object',
    properties: {
        count: {
            type: 'number'
        },
        list: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AiAliyunAccount'
            }
        }
    },
    required: ['count', 'list']
} as const;

export const AiAliyunAccountPaginateResponseSchema = {
    type: 'object',
    properties: {
        code: {
            type: 'number'
        },
        message: {
            type: 'string'
        },
        data: {
            '$ref': '#/components/schemas/AiAliyunAccountPaginatePage'
        }
    },
    required: ['code', 'message', 'data']
} as const;

export const AiAliyunAccountGetResponseSchema = {
    type: 'object',
    properties: {
        code: {
            type: 'number'
        },
        message: {
            type: 'string'
        },
        data: {
            '$ref': '#/components/schemas/AiAliyunAccount'
        }
    },
    required: ['code', 'message', 'data']
} as const;

export const UpdateAiAliyunAccountDtoSchema = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            description: '名称'
        },
        accessKey: {
            type: 'string',
            description: 'Access Key'
        },
        secretKey: {
            type: 'string',
            description: 'Secret Key'
        },
        dashscopeApiKey: {
            type: 'string',
            description: 'Secret Key'
        }
    }
} as const;

export const AliyunOcrOperatesSchema = {
    type: 'string',
    enum: ['RecognizeAllText']
} as const;

export const AliyunOcrRecognizeAllTextTypeSchema = {
    type: 'string',
    enum: ['Advanced', 'General', 'Commerce', 'HandWriting', 'MultiLang', 'Table', 'IdCard', 'BankCard', 'InternationalPassport', 'ChinesePassport', 'SocialSecurityCard', 'PermitToHK_MO_TW', 'PermitToMainland', 'HouseholdHead', 'HouseholdResident', 'EstateCertification', 'BirthCertification', 'HKIdCard', 'InternationalIdCard', 'Stamp', 'MixedInvoice', 'Invoice', 'CarInvoice', 'QuotaInvoice', 'AirItinerary', 'TrainTicket', 'TollInvoice', 'RollTicket', 'BankAcceptance', 'BusShipTicket', 'NonTaxInvoice', 'CommonPrintedInvoice', 'HotelConsume', 'PaymentRecord', 'PurchaseRecord', 'RideHailingItinerary', 'ShoppingReceipt', 'TaxClearanceCertificate', 'UsedCarInvoice', 'VehicleLicense', 'DrivingLicense', 'VehicleRegistration', 'VehicleCertification', 'LicensePlateNumber', 'CarVinCode', 'BusinessLicense', 'InternationalBusinessLicense', 'MedicalDeviceManageLicense', 'MedicalDeviceProduceLicense', 'CosmeticProduceLicense', 'QrCode', 'BarCode', 'TaxiInvoice', 'TrademarkCertificate', 'FoodProduceLicense', 'FoodManagementLicense', 'ClassIIMedicalDeviceManageLicense', 'WayBill', 'BankAccountPermit']
} as const;

export const RecognizeAllTextSchema = {
    type: 'object',
    properties: {
        type: {
            description: '识别类型',
            '$ref': '#/components/schemas/AliyunOcrRecognizeAllTextType'
        },
        fileId: {
            type: 'string',
            description: '文件'
        }
    },
    required: ['type', 'fileId']
} as const;

export const CreateAiAliyunOcrDtoSchema = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            description: '名称'
        },
        accountId: {
            type: 'string',
            description: '账号信息'
        },
        type: {
            description: '操作方法',
            '$ref': '#/components/schemas/AliyunOcrOperates'
        },
        recognizeAllText: {
            '$ref': '#/components/schemas/RecognizeAllText'
        }
    },
    required: ['name', 'accountId', 'type', 'recognizeAllText']
} as const;

export const AiAliyunOcrRecognizeAllTextSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string'
        },
        file: {
            '$ref': '#/components/schemas/File'
        },
        type: {
            type: 'string',
            description: '图片类型'
        },
        result: {
            type: 'string',
            description: 'ocr识别结果'
        },
        createDate: {
            format: 'date-time',
            type: 'string',
            description: '创建时间'
        },
        updateDate: {
            format: 'date-time',
            type: 'string',
            description: '更新时间'
        }
    },
    required: ['id', 'file', 'type', 'result', 'createDate', 'updateDate']
} as const;

export const AiAliyunOcrSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string'
        },
        name: {
            type: 'string',
            description: 'ocr任务名称'
        },
        account: {
            '$ref': '#/components/schemas/AiAliyunAccount'
        },
        type: {
            type: 'string',
            description: '操作类型'
        },
        recognizeAllText: {
            '$ref': '#/components/schemas/AiAliyunOcrRecognizeAllText'
        },
        creator: {
            '$ref': '#/components/schemas/User'
        },
        createDate: {
            format: 'date-time',
            type: 'string',
            description: '创建时间'
        },
        updateDate: {
            format: 'date-time',
            type: 'string',
            description: '更新时间'
        }
    },
    required: ['id', 'name', 'account', 'type', 'recognizeAllText', 'creator', 'createDate', 'updateDate']
} as const;

export const AiAliyunOcrGetAllResponseSchema = {
    type: 'object',
    properties: {
        code: {
            type: 'number'
        },
        message: {
            type: 'string'
        },
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AiAliyunOcr'
            }
        }
    },
    required: ['code', 'message', 'data']
} as const;

export const AiAliyunOcrPaginatePageSchema = {
    type: 'object',
    properties: {
        count: {
            type: 'number'
        },
        list: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AiAliyunOcr'
            }
        }
    },
    required: ['count', 'list']
} as const;

export const AiAliyunOcrPaginateResponseSchema = {
    type: 'object',
    properties: {
        code: {
            type: 'number'
        },
        message: {
            type: 'string'
        },
        data: {
            '$ref': '#/components/schemas/AiAliyunOcrPaginatePage'
        }
    },
    required: ['code', 'message', 'data']
} as const;

export const AiAliyunOcrGetResponseSchema = {
    type: 'object',
    properties: {
        code: {
            type: 'number'
        },
        message: {
            type: 'string'
        },
        data: {
            '$ref': '#/components/schemas/AiAliyunOcr'
        }
    },
    required: ['code', 'message', 'data']
} as const;

export const CreateAiAliyunServiceDtoSchema = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            description: '服务名称'
        },
        endpoint: {
            type: 'string',
            description: '接口endpoint'
        },
        path: {
            type: 'string',
            description: '接口path'
        },
        model: {
            type: 'string',
            description: 'model'
        },
        typeId: {
            type: 'string',
            description: '服务类型'
        }
    },
    required: ['name', 'typeId']
} as const;

export const AiAliyunServiceSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string'
        },
        name: {
            type: 'string',
            description: '服务名称'
        },
        endpoint: {
            type: 'string',
            description: '接口endpoint'
        },
        path: {
            type: 'string',
            description: '接口path'
        },
        model: {
            type: 'string',
            description: 'model'
        },
        type: {
            '$ref': '#/components/schemas/AiServiceType'
        },
        creator: {
            '$ref': '#/components/schemas/User'
        },
        createDate: {
            format: 'date-time',
            type: 'string',
            description: '创建时间'
        },
        updateDate: {
            format: 'date-time',
            type: 'string',
            description: '更新时间'
        }
    },
    required: ['id', 'name', 'endpoint', 'path', 'model', 'type', 'creator', 'createDate', 'updateDate']
} as const;

export const AiAliyunServiceGetAllResponseSchema = {
    type: 'object',
    properties: {
        code: {
            type: 'number'
        },
        message: {
            type: 'string'
        },
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AiAliyunService'
            }
        }
    },
    required: ['code', 'message', 'data']
} as const;

export const AiAliyunServicePaginatePageSchema = {
    type: 'object',
    properties: {
        count: {
            type: 'number'
        },
        list: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AiAliyunService'
            }
        }
    },
    required: ['count', 'list']
} as const;

export const AiAliyunServicePaginateResponseSchema = {
    type: 'object',
    properties: {
        code: {
            type: 'number'
        },
        message: {
            type: 'string'
        },
        data: {
            '$ref': '#/components/schemas/AiAliyunServicePaginatePage'
        }
    },
    required: ['code', 'message', 'data']
} as const;

export const AiAliyunServiceGetResponseSchema = {
    type: 'object',
    properties: {
        code: {
            type: 'number'
        },
        message: {
            type: 'string'
        },
        data: {
            '$ref': '#/components/schemas/AiAliyunService'
        }
    },
    required: ['code', 'message', 'data']
} as const;

export const UpdateAiAliyunServiceDtoSchema = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            description: '服务名称'
        },
        endpoint: {
            type: 'string',
            description: '接口endpoint'
        },
        path: {
            type: 'string',
            description: '接口path'
        },
        model: {
            type: 'string',
            description: 'model'
        },
        typeId: {
            type: 'string',
            description: '服务类型'
        }
    }
} as const;

export const CreateAiAliyunSessionDtoSchema = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            description: '名称'
        },
        accountId: {
            type: 'string',
            description: '账号'
        },
        serviceId: {
            type: 'string',
            description: '服务'
        }
    },
    required: ['name', 'accountId', 'serviceId']
} as const;

export const AiAliyunSessionSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string'
        },
        name: {
            type: 'string',
            description: '会话名称'
        },
        account: {
            '$ref': '#/components/schemas/AiAliyunAccount'
        },
        service: {
            '$ref': '#/components/schemas/AiAliyunService'
        },
        creator: {
            '$ref': '#/components/schemas/User'
        },
        createDate: {
            format: 'date-time',
            type: 'string',
            description: '创建时间'
        },
        updateDate: {
            format: 'date-time',
            type: 'string',
            description: '更新时间'
        }
    },
    required: ['id', 'name', 'account', 'service', 'creator', 'createDate', 'updateDate']
} as const;

export const AiAliyunSessionGetAllResponseSchema = {
    type: 'object',
    properties: {
        code: {
            type: 'number'
        },
        message: {
            type: 'string'
        },
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AiAliyunSession'
            }
        }
    },
    required: ['code', 'message', 'data']
} as const;

export const AiAliyunSessionPaginatePageSchema = {
    type: 'object',
    properties: {
        count: {
            type: 'number'
        },
        list: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AiAliyunSession'
            }
        }
    },
    required: ['count', 'list']
} as const;

export const AiAliyunSessionPaginateResponseSchema = {
    type: 'object',
    properties: {
        code: {
            type: 'number'
        },
        message: {
            type: 'string'
        },
        data: {
            '$ref': '#/components/schemas/AiAliyunSessionPaginatePage'
        }
    },
    required: ['code', 'message', 'data']
} as const;

export const AiAliyunSessionGetResponseSchema = {
    type: 'object',
    properties: {
        code: {
            type: 'number'
        },
        message: {
            type: 'string'
        },
        data: {
            '$ref': '#/components/schemas/AiAliyunSession'
        }
    },
    required: ['code', 'message', 'data']
} as const;

export const UpdateAiAliyunSessionDtoSchema = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            description: '名称'
        },
        accountId: {
            type: 'string',
            description: '账号'
        },
        serviceId: {
            type: 'string',
            description: '服务'
        }
    }
} as const;

export const CreateAiAliyunMessageDtoSchema = {
    type: 'object',
    properties: {
        content: {
            type: 'string',
            description: '消息内容'
        },
        sessionId: {
            type: 'string',
            description: '会话Id'
        }
    },
    required: ['content', 'sessionId']
} as const;

export const AiAliyunMessageSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string'
        },
        role: {
            type: 'string',
            description: 'role'
        },
        content: {
            type: 'string',
            description: 'content'
        },
        qid: {
            type: 'string',
            description: 'queueId'
        },
        status: {
            type: 'string',
            description: '状态'
        },
        session: {
            '$ref': '#/components/schemas/AiAliyunSession'
        },
        createDate: {
            format: 'date-time',
            type: 'string',
            description: '创建时间'
        },
        updateDate: {
            format: 'date-time',
            type: 'string',
            description: '更新时间'
        }
    },
    required: ['id', 'role', 'content', 'qid', 'status', 'session', 'createDate', 'updateDate']
} as const;

export const AiAliyunAccountGetHistoryResponseSchema = {
    type: 'object',
    properties: {
        code: {
            type: 'number'
        },
        message: {
            type: 'string'
        },
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AiAliyunMessage'
            }
        }
    },
    required: ['code', 'message', 'data']
} as const;

export const PathTypeSchema = {
    type: 'string',
    enum: ['unknown', 'file', 'dir']
} as const;

export const FileDetailDtoSchema = {
    type: 'object',
    properties: {
        fileId: {
            type: 'string'
        }
    },
    required: ['fileId']
} as const;

export const CreateFDtoSchema = {
    type: 'object',
    properties: {
        name: {
            type: 'string'
        },
        favorite: {
            type: 'boolean'
        },
        parentId: {
            type: 'string'
        },
        pathType: {
            description: '路径类型',
            '$ref': '#/components/schemas/PathType'
        },
        fileDetail: {
            '$ref': '#/components/schemas/FileDetailDto'
        }
    },
    required: ['name', 'parentId', 'pathType']
} as const;

export const FileDetailSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string'
        },
        file: {
            '$ref': '#/components/schemas/File'
        },
        createDate: {
            format: 'date-time',
            type: 'string',
            description: '创建时间'
        },
        updateDate: {
            format: 'date-time',
            type: 'string',
            description: '更新时间'
        }
    },
    required: ['id', 'createDate', 'updateDate']
} as const;

export const FSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string'
        },
        name: {
            type: 'string'
        },
        favorite: {
            type: 'boolean'
        },
        pathType: {
            description: '路径类型',
            '$ref': '#/components/schemas/PathType'
        },
        parent: {
            '$ref': '#/components/schemas/F'
        },
        children: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/F'
            }
        },
        fileDetail: {
            '$ref': '#/components/schemas/FileDetail'
        },
        creator: {
            '$ref': '#/components/schemas/User'
        },
        createDate: {
            format: 'date-time',
            type: 'string',
            description: '创建时间'
        },
        updateDate: {
            format: 'date-time',
            type: 'string',
            description: '更新时间'
        }
    },
    required: ['id', 'name', 'favorite', 'pathType', 'parent', 'children', 'createDate', 'updateDate']
} as const;

export const FGetAllResponseSchema = {
    type: 'object',
    properties: {
        code: {
            type: 'number'
        },
        message: {
            type: 'string'
        },
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/F'
            }
        }
    },
    required: ['code', 'message', 'data']
} as const;

export const FGetResponseSchema = {
    type: 'object',
    properties: {
        code: {
            type: 'number'
        },
        message: {
            type: 'string'
        },
        data: {
            '$ref': '#/components/schemas/F'
        }
    },
    required: ['code', 'message', 'data']
} as const;

export const UpdateFDtoSchema = {
    type: 'object',
    properties: {
        name: {
            type: 'string'
        },
        favorite: {
            type: 'boolean'
        },
        parentId: {
            type: 'string'
        },
        pathType: {
            description: '路径类型',
            '$ref': '#/components/schemas/PathType'
        },
        fileDetail: {
            '$ref': '#/components/schemas/FileDetailDto'
        }
    }
} as const;

export const BiDataStructTypeSchema = {
    type: 'string',
    enum: ['TEXT', 'NUMBER', 'DATE', 'TIME', 'DATETIME', 'BOOLEAN', 'OBJECT', 'ARRAY', 'NULL', 'UNKNOWN']
} as const;

export const BiDataStructSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string'
        },
        type: {
            description: '操作类型',
            '$ref': '#/components/schemas/BiDataStructType'
        },
        name: {
            type: 'string',
            description: '字段名'
        },
        group: {
            type: 'string',
            description: '字段分组'
        },
        desc: {
            type: 'string',
            description: '字段说明'
        },
        meta: {
            '$ref': '#/components/schemas/BiDataMeta'
        },
        createDate: {
            format: 'date-time',
            type: 'string',
            description: '创建时间'
        },
        updateDate: {
            format: 'date-time',
            type: 'string',
            description: '更新时间'
        }
    },
    required: ['id', 'type', 'name', 'group', 'desc', 'meta', 'createDate', 'updateDate']
} as const;

export const BiDataRuleTypeSchema = {
    type: 'string',
    enum: ['EXCEL', 'SQL', 'API']
} as const;

export const BiDataRuleSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string'
        },
        type: {
            description: '类型',
            '$ref': '#/components/schemas/BiDataRuleType'
        },
        excelFile: {
            '$ref': '#/components/schemas/File'
        },
        sql: {
            type: 'string',
            description: 'sql'
        },
        meta: {
            '$ref': '#/components/schemas/BiDataMeta'
        },
        createDate: {
            format: 'date-time',
            type: 'string',
            description: '创建时间'
        },
        updateDate: {
            format: 'date-time',
            type: 'string',
            description: '更新时间'
        }
    },
    required: ['id', 'type', 'excelFile', 'sql', 'meta', 'createDate', 'updateDate']
} as const;

export const BiDataMetaSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string'
        },
        name: {
            type: 'string',
            description: '名称'
        },
        desc: {
            type: 'string',
            description: '描述'
        },
        structs: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/BiDataStruct'
            }
        },
        rule: {
            '$ref': '#/components/schemas/BiDataRule'
        },
        creator: {
            '$ref': '#/components/schemas/User'
        },
        createDate: {
            format: 'date-time',
            type: 'string',
            description: '创建时间'
        },
        updateDate: {
            format: 'date-time',
            type: 'string',
            description: '更新时间'
        }
    },
    required: ['id', 'name', 'desc', 'structs', 'rule', 'creator', 'createDate', 'updateDate']
} as const;

export const BiDataMetaGetAllResponseSchema = {
    type: 'object',
    properties: {
        code: {
            type: 'number'
        },
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/BiDataMeta'
            }
        }
    },
    required: ['code', 'data']
} as const;

export const BiDataMetaGetResponseSchema = {
    type: 'object',
    properties: {
        code: {
            type: 'number'
        },
        data: {
            '$ref': '#/components/schemas/BiDataMeta'
        }
    },
    required: ['code', 'data']
} as const;

export const CreateBiDataMetaDtoSchema = {
    type: 'object',
    properties: {
        name: {
            type: 'string'
        },
        desc: {
            type: 'string'
        }
    },
    required: ['name', 'desc']
} as const;

export const UpdateBiDataMetaDtoSchema = {
    type: 'object',
    properties: {
        name: {
            type: 'string'
        },
        desc: {
            type: 'string'
        }
    }
} as const;

export const BiDataMetaPaginatePageSchema = {
    type: 'object',
    properties: {
        list: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/BiDataMeta'
            }
        },
        count: {
            type: 'number'
        }
    },
    required: ['list', 'count']
} as const;

export const BiDataMetaPaginateResponseSchema = {
    type: 'object',
    properties: {
        code: {
            type: 'number'
        },
        data: {
            '$ref': '#/components/schemas/BiDataMetaPaginatePage'
        }
    },
    required: ['code', 'data']
} as const;

export const BiDataStructGetAllResponseSchema = {
    type: 'object',
    properties: {
        code: {
            type: 'number'
        },
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/BiDataStruct'
            }
        }
    },
    required: ['code', 'data']
} as const;

export const BiDataStructGetResponseSchema = {
    type: 'object',
    properties: {
        code: {
            type: 'number'
        },
        data: {
            '$ref': '#/components/schemas/BiDataStruct'
        }
    },
    required: ['code', 'data']
} as const;

export const CreateBiDataStructDtoSchema = {
    type: 'object',
    properties: {
        type: {
            '$ref': '#/components/schemas/BiDataStructType'
        },
        name: {
            type: 'string'
        },
        group: {
            type: 'string'
        },
        desc: {
            type: 'string'
        }
    },
    required: ['type', 'name', 'group', 'desc']
} as const;

export const UpdateBiDataStructDtoSchema = {
    type: 'object',
    properties: {
        type: {
            '$ref': '#/components/schemas/BiDataStructType'
        },
        name: {
            type: 'string'
        },
        group: {
            type: 'string'
        },
        desc: {
            type: 'string'
        }
    }
} as const;

export const BiDataRuleGetResponseSchema = {
    type: 'object',
    properties: {
        code: {
            type: 'number'
        },
        data: {
            '$ref': '#/components/schemas/BiDataRule'
        }
    },
    required: ['code', 'data']
} as const;

export const CreateBiDataRuleDtoSchema = {
    type: 'object',
    properties: {
        type: {
            '$ref': '#/components/schemas/BiDataRuleType'
        },
        excelFile: {
            '$ref': '#/components/schemas/File'
        },
        sql: {
            type: 'string'
        }
    },
    required: ['type', 'excelFile', 'sql']
} as const;

export const UpdateBiDataRuleDtoSchema = {
    type: 'object',
    properties: {
        type: {
            '$ref': '#/components/schemas/BiDataRuleType'
        },
        excelFile: {
            '$ref': '#/components/schemas/File'
        },
        sql: {
            type: 'string'
        }
    }
} as const;

export const ColumnSchema = {
    type: 'object',
    properties: {}
} as const;

export const DataViewSchema = {
    type: 'object',
    properties: {
        columns: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Column'
            }
        },
        data: {
            type: 'array',
            items: {
                type: 'string'
            }
        }
    },
    required: ['columns', 'data']
} as const;

export const BiDataViewGetResponseSchema = {
    type: 'object',
    properties: {
        code: {
            type: 'number'
        },
        data: {
            '$ref': '#/components/schemas/DataView'
        }
    },
    required: ['code', 'data']
} as const;

export const CreateBiChartMetaDtoSchema = {
    type: 'object',
    properties: {}
} as const;

export const UpdateBiChartMetaDtoSchema = {
    type: 'object',
    properties: {}
} as const;

export const CreateBiViewMetaDtoSchema = {
    type: 'object',
    properties: {}
} as const;

export const UpdateBiViewMetaDtoSchema = {
    type: 'object',
    properties: {}
} as const;