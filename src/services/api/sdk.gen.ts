// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type OptionsLegacyParser, formDataBodySerializer } from '@hey-api/client-axios';
import type { PostApiAddressCreateSessionData, PostApiAddressCreateSessionError, PostApiAddressCreateSessionResponse, GetApiAddressGetAllSessionError, GetApiAddressGetAllSessionResponse, DeleteApiAddressByIdSessionData, DeleteApiAddressByIdSessionError, DeleteApiAddressByIdSessionResponse, PutApiAddressByIdSessionData, PutApiAddressByIdSessionError, PutApiAddressByIdSessionResponse, GetApiAddressByIdData, GetApiAddressByIdError, GetApiAddressByIdResponse, PostApiAiAliyunAccountData, PostApiAiAliyunAccountError, PostApiAiAliyunAccountResponse, GetApiAiAliyunAccountError, GetApiAiAliyunAccountResponse, GetApiAiAliyunAccountPaginateData, GetApiAiAliyunAccountPaginateError, GetApiAiAliyunAccountPaginateResponse, GetApiAiAliyunAccountByIdData, GetApiAiAliyunAccountByIdError, GetApiAiAliyunAccountByIdResponse, PatchApiAiAliyunAccountByIdData, PatchApiAiAliyunAccountByIdError, PatchApiAiAliyunAccountByIdResponse, DeleteApiAiAliyunAccountByIdData, DeleteApiAiAliyunAccountByIdError, DeleteApiAiAliyunAccountByIdResponse, PostApiAiAliyunMessageData, PostApiAiAliyunMessageError, PostApiAiAliyunMessageResponse, GetApiAiAliyunMessageData, GetApiAiAliyunMessageError, GetApiAiAliyunMessageResponse, PostApiAiAliyunOcrData, PostApiAiAliyunOcrError, PostApiAiAliyunOcrResponse, GetApiAiAliyunOcrError, GetApiAiAliyunOcrResponse, GetApiAiAliyunOcrPaginateData, GetApiAiAliyunOcrPaginateError, GetApiAiAliyunOcrPaginateResponse, GetApiAiAliyunOcrByIdData, GetApiAiAliyunOcrByIdError, GetApiAiAliyunOcrByIdResponse, PutApiAiAliyunOcrByIdData, PutApiAiAliyunOcrByIdError, PutApiAiAliyunOcrByIdResponse, PostApiAiAliyunServiceData, PostApiAiAliyunServiceError, PostApiAiAliyunServiceResponse, GetApiAiAliyunServiceError, GetApiAiAliyunServiceResponse, GetApiAiAliyunServicePaginateData, GetApiAiAliyunServicePaginateError, GetApiAiAliyunServicePaginateResponse, GetApiAiAliyunServiceByIdData, GetApiAiAliyunServiceByIdError, GetApiAiAliyunServiceByIdResponse, PatchApiAiAliyunServiceByIdData, PatchApiAiAliyunServiceByIdError, PatchApiAiAliyunServiceByIdResponse, DeleteApiAiAliyunServiceByIdData, DeleteApiAiAliyunServiceByIdError, DeleteApiAiAliyunServiceByIdResponse, PostApiAiAliyunSessionData, PostApiAiAliyunSessionError, PostApiAiAliyunSessionResponse, GetApiAiAliyunSessionError, GetApiAiAliyunSessionResponse, GetApiAiAliyunSessionPaginateData, GetApiAiAliyunSessionPaginateError, GetApiAiAliyunSessionPaginateResponse, GetApiAiAliyunSessionByIdData, GetApiAiAliyunSessionByIdError, GetApiAiAliyunSessionByIdResponse, PatchApiAiAliyunSessionByIdData, PatchApiAiAliyunSessionByIdError, PatchApiAiAliyunSessionByIdResponse, DeleteApiAiAliyunSessionByIdData, DeleteApiAiAliyunSessionByIdError, DeleteApiAiAliyunSessionByIdResponse, PostApiAiBaiduAccountData, PostApiAiBaiduAccountError, PostApiAiBaiduAccountResponse, GetApiAiBaiduAccountError, GetApiAiBaiduAccountResponse, GetApiAiBaiduAccountPaginateData, GetApiAiBaiduAccountPaginateError, GetApiAiBaiduAccountPaginateResponse, GetApiAiBaiduAccountByIdData, GetApiAiBaiduAccountByIdError, GetApiAiBaiduAccountByIdResponse, PatchApiAiBaiduAccountByIdData, PatchApiAiBaiduAccountByIdError, PatchApiAiBaiduAccountByIdResponse, DeleteApiAiBaiduAccountByIdData, DeleteApiAiBaiduAccountByIdError, DeleteApiAiBaiduAccountByIdResponse, PostApiAiBaiduMessageData, PostApiAiBaiduMessageError, PostApiAiBaiduMessageResponse, GetApiAiBaiduMessageData, GetApiAiBaiduMessageError, GetApiAiBaiduMessageResponse, PostApiAiBaiduOcrData, PostApiAiBaiduOcrError, PostApiAiBaiduOcrResponse, GetApiAiBaiduOcrError, GetApiAiBaiduOcrResponse, GetApiAiBaiduOcrPaginateData, GetApiAiBaiduOcrPaginateError, GetApiAiBaiduOcrPaginateResponse, GetApiAiBaiduOcrByIdData, GetApiAiBaiduOcrByIdError, GetApiAiBaiduOcrByIdResponse, PostApiAiBaiduServiceData, PostApiAiBaiduServiceError, PostApiAiBaiduServiceResponse, GetApiAiBaiduServiceError, GetApiAiBaiduServiceResponse, GetApiAiBaiduServicePaginateData, GetApiAiBaiduServicePaginateError, GetApiAiBaiduServicePaginateResponse, GetApiAiBaiduServiceByIdData, GetApiAiBaiduServiceByIdError, GetApiAiBaiduServiceByIdResponse, PatchApiAiBaiduServiceByIdData, PatchApiAiBaiduServiceByIdError, PatchApiAiBaiduServiceByIdResponse, DeleteApiAiBaiduServiceByIdData, DeleteApiAiBaiduServiceByIdError, DeleteApiAiBaiduServiceByIdResponse, PostApiAiBaiduSessionData, PostApiAiBaiduSessionError, PostApiAiBaiduSessionResponse, GetApiAiBaiduSessionError, GetApiAiBaiduSessionResponse, GetApiAiBaiduSessionPaginateData, GetApiAiBaiduSessionPaginateError, GetApiAiBaiduSessionPaginateResponse, GetApiAiBaiduSessionByIdData, GetApiAiBaiduSessionByIdError, GetApiAiBaiduSessionByIdResponse, PatchApiAiBaiduSessionByIdData, PatchApiAiBaiduSessionByIdError, PatchApiAiBaiduSessionByIdResponse, DeleteApiAiBaiduSessionByIdData, DeleteApiAiBaiduSessionByIdError, DeleteApiAiBaiduSessionByIdResponse, PostApiAiCommonServiceTypeData, PostApiAiCommonServiceTypeError, PostApiAiCommonServiceTypeResponse, GetApiAiCommonServiceTypeError, GetApiAiCommonServiceTypeResponse, GetApiAiCommonServiceTypeByIdData, GetApiAiCommonServiceTypeByIdError, GetApiAiCommonServiceTypeByIdResponse, PatchApiAiCommonServiceTypeByIdData, PatchApiAiCommonServiceTypeByIdError, PatchApiAiCommonServiceTypeByIdResponse, DeleteApiAiCommonServiceTypeByIdData, DeleteApiAiCommonServiceTypeByIdError, DeleteApiAiCommonServiceTypeByIdResponse, GetApiAreaProvincesData, GetApiAreaProvincesError, GetApiAreaProvincesResponse, GetApiAreaCitiesData, GetApiAreaCitiesError, GetApiAreaCitiesResponse, GetApiAreaRegionsData, GetApiAreaRegionsError, GetApiAreaRegionsResponse, GetApiAreaTreeDataError, GetApiAreaTreeDataResponse, GetApiAuthVerifyError, GetApiAuthVerifyResponse, DeleteApiAuthCancellationError, DeleteApiAuthCancellationResponse, PostApiAuthLoginData, PostApiAuthLoginError, PostApiAuthLoginResponse, PostApiAuthLoginBySmsCodeData, PostApiAuthLoginBySmsCodeError, PostApiAuthLoginBySmsCodeResponse, PostApiAuthLoginByWeixinData, PostApiAuthLoginByWeixinError, PostApiAuthLoginByWeixinResponse, PostApiAuthLoginByWeixinMobileData, PostApiAuthLoginByWeixinMobileError, PostApiAuthLoginByWeixinMobileResponse, PostApiAuthLoginByCodeData, PostApiAuthLoginByCodeError, PostApiAuthLoginByCodeResponse, GetApiAuthAuthenticateError, GetApiAuthAuthenticateResponse, GetApiBiChartMetaError, GetApiBiChartMetaResponse, PostApiBiChartMetaData, PostApiBiChartMetaError, PostApiBiChartMetaResponse, GetApiBiChartMetaByIdData, GetApiBiChartMetaByIdError, GetApiBiChartMetaByIdResponse, DeleteApiBiChartMetaByIdData, DeleteApiBiChartMetaByIdError, DeleteApiBiChartMetaByIdResponse, PutApiBiChartMetaByIdData, PutApiBiChartMetaByIdError, PutApiBiChartMetaByIdResponse, GetApiBiChartMetaPageAllData, GetApiBiChartMetaPageAllError, GetApiBiChartMetaPageAllResponse, GetApiBiChartMetaByMetaIdSettingData, GetApiBiChartMetaByMetaIdSettingError, GetApiBiChartMetaByMetaIdSettingResponse, PostApiBiChartMetaByMetaIdSettingData, PostApiBiChartMetaByMetaIdSettingError, PostApiBiChartMetaByMetaIdSettingResponse, PutApiBiChartSettingByIdData, PutApiBiChartSettingByIdError, PutApiBiChartSettingByIdResponse, GetApiBiDataMetaError, GetApiBiDataMetaResponse, PostApiBiDataMetaData, PostApiBiDataMetaError, PostApiBiDataMetaResponse, GetApiBiDataMetaByIdData, GetApiBiDataMetaByIdError, GetApiBiDataMetaByIdResponse, DeleteApiBiDataMetaByIdData, DeleteApiBiDataMetaByIdError, DeleteApiBiDataMetaByIdResponse, PutApiBiDataMetaByIdData, PutApiBiDataMetaByIdError, PutApiBiDataMetaByIdResponse, GetApiBiDataMetaPageAllData, GetApiBiDataMetaPageAllError, GetApiBiDataMetaPageAllResponse, GetApiBiDataMetaByMetaIdRuleData, GetApiBiDataMetaByMetaIdRuleError, GetApiBiDataMetaByMetaIdRuleResponse, PostApiBiDataMetaByMetaIdRuleData, PostApiBiDataMetaByMetaIdRuleError, PostApiBiDataMetaByMetaIdRuleResponse, PutApiBiDataRuleByIdData, PutApiBiDataRuleByIdError, PutApiBiDataRuleByIdResponse, GetApiBiDataMetaByMetaIdStructError, GetApiBiDataMetaByMetaIdStructResponse, PostApiBiDataMetaByMetaIdStructData, PostApiBiDataMetaByMetaIdStructError, PostApiBiDataMetaByMetaIdStructResponse, GetApiBiDataStructByIdData, GetApiBiDataStructByIdError, GetApiBiDataStructByIdResponse, DeleteApiBiDataStructByIdData, DeleteApiBiDataStructByIdError, DeleteApiBiDataStructByIdResponse, PutApiBiDataStructByIdData, PutApiBiDataStructByIdError, PutApiBiDataStructByIdResponse, GetApiBiDataViewByMetaIdData, GetApiBiDataViewByMetaIdError, GetApiBiDataViewByMetaIdResponse, PostApiChatContactsData, PostApiChatContactsError, PostApiChatContactsResponse, GetApiChatContactsError, GetApiChatContactsResponse, DeleteApiChatContactsByIdData, DeleteApiChatContactsByIdError, DeleteApiChatContactsByIdResponse, PutApiChatContactsByIdData, PutApiChatContactsByIdError, PutApiChatContactsByIdResponse, PostApiChatMessageData, PostApiChatMessageError, PostApiChatMessageResponse, GetApiChatMessageCursorData, GetApiChatMessageCursorError, GetApiChatMessageCursorResponse, PostApiChatSessionData, PostApiChatSessionError, PostApiChatSessionResponse, GetApiChatSessionError, GetApiChatSessionResponse, DeleteApiChatSessionByIdData, DeleteApiChatSessionByIdError, DeleteApiChatSessionByIdResponse, PostApiWeixinPlatformPayCenterNotifyCommonPayByAppidByMchidError, PostApiWeixinPlatformPayCenterNotifyCommonPayByAppidByMchidResponse, PostApiWeixinPlatformPayCenterNotifyNativePayByAppidByMchidError, PostApiWeixinPlatformPayCenterNotifyNativePayByAppidByMchidResponse, PostApiWeixinPlatformPayCenterNotifyRefundByAppidByMchidError, PostApiWeixinPlatformPayCenterNotifyRefundByAppidByMchidResponse, PostApiAiSessionData, PostApiAiSessionError, PostApiAiSessionResponse, GetApiAiSessionError, GetApiAiSessionResponse, GetApiAiSessionByIdData, GetApiAiSessionByIdError, GetApiAiSessionByIdResponse, PatchApiAiSessionByIdData, PatchApiAiSessionByIdError, PatchApiAiSessionByIdResponse, DeleteApiAiSessionByIdData, DeleteApiAiSessionByIdError, DeleteApiAiSessionByIdResponse, PostApiBiViewMetaData, PostApiBiViewMetaError, PostApiBiViewMetaResponse, GetApiBiViewMetaError, GetApiBiViewMetaResponse, GetApiBiViewMetaByIdData, GetApiBiViewMetaByIdError, GetApiBiViewMetaByIdResponse, PatchApiBiViewMetaByIdData, PatchApiBiViewMetaByIdError, PatchApiBiViewMetaByIdResponse, DeleteApiBiViewMetaByIdData, DeleteApiBiViewMetaByIdError, DeleteApiBiViewMetaByIdResponse, PostApiFileUploadData, PostApiFileUploadError, PostApiFileUploadResponse, PostApiFileUploadsData, PostApiFileUploadsError, PostApiFileUploadsResponse, GetApiFileByIdData, GetApiFileByIdError, GetApiFileByIdResponse, GetApiFileStaticByIdData, GetApiFileStaticByIdError, GetApiFileStaticByIdResponse, PostApiForumCommentData, PostApiForumCommentError, PostApiForumCommentResponse, GetApiForumCommentData, GetApiForumCommentError, GetApiForumCommentResponse, DeleteApiForumCommentByIdData, DeleteApiForumCommentByIdError, DeleteApiForumCommentByIdResponse, GetApiForumCommentByIdData, GetApiForumCommentByIdError, GetApiForumCommentByIdResponse, GetApiForumCommentPageAllData, GetApiForumCommentPageAllError, GetApiForumCommentPageAllResponse, GetApiForumCommentPageSessionData, GetApiForumCommentPageSessionError, GetApiForumCommentPageSessionResponse, GetApiForumCommentCountAllData, GetApiForumCommentCountAllError, GetApiForumCommentCountAllResponse, GetApiForumCommentCountSessionData, GetApiForumCommentCountSessionError, GetApiForumCommentCountSessionResponse, PostApiForumPostData, PostApiForumPostError, PostApiForumPostResponse, GetApiForumPostData, GetApiForumPostError, GetApiForumPostResponse, DeleteApiForumPostByIdData, DeleteApiForumPostByIdError, DeleteApiForumPostByIdResponse, PutApiForumPostByIdData, PutApiForumPostByIdError, PutApiForumPostByIdResponse, GetApiForumPostByIdData, GetApiForumPostByIdError, GetApiForumPostByIdResponse, GetApiForumPostPageAllData, GetApiForumPostPageAllError, GetApiForumPostPageAllResponse, GetApiForumPostPageSessionData, GetApiForumPostPageSessionError, GetApiForumPostPageSessionResponse, GetApiForumPostPageCursorAllData, GetApiForumPostPageCursorAllError, GetApiForumPostPageCursorAllResponse, GetApiForumPostCountAllData, GetApiForumPostCountAllError, GetApiForumPostCountAllResponse, GetApiForumPostCountSessionData, GetApiForumPostCountSessionError, GetApiForumPostCountSessionResponse, PostApiForumPostRelationData, PostApiForumPostRelationError, PostApiForumPostRelationResponse, GetApiForumPostRelationData, GetApiForumPostRelationError, GetApiForumPostRelationResponse, DeleteApiForumPostRelationByIdData, DeleteApiForumPostRelationByIdError, DeleteApiForumPostRelationByIdResponse, GetApiForumPostRelationByIdData, GetApiForumPostRelationByIdError, GetApiForumPostRelationByIdResponse, GetApiForumPostRelationSessionInfoData, GetApiForumPostRelationSessionInfoError, GetApiForumPostRelationSessionInfoResponse, GetApiForumPostRelationPageAllData, GetApiForumPostRelationPageAllError, GetApiForumPostRelationPageAllResponse, GetApiForumPostRelationPageSessionData, GetApiForumPostRelationPageSessionError, GetApiForumPostRelationPageSessionResponse, GetApiForumPostRelationCountAllData, GetApiForumPostRelationCountAllError, GetApiForumPostRelationCountAllResponse, GetApiForumPostRelationCountSessionData, GetApiForumPostRelationCountSessionError, GetApiForumPostRelationCountSessionResponse, GetApiForumSectionError, GetApiForumSectionResponse, PostApiForumSectionData, PostApiForumSectionError, PostApiForumSectionResponse, GetApiForumSectionByIdData, GetApiForumSectionByIdError, GetApiForumSectionByIdResponse, DeleteApiForumSectionByIdData, DeleteApiForumSectionByIdError, DeleteApiForumSectionByIdResponse, PutApiForumSectionByIdData, PutApiForumSectionByIdError, PutApiForumSectionByIdResponse, GetApiForumSectionPageAllData, GetApiForumSectionPageAllError, GetApiForumSectionPageAllResponse, GetApiForumSectionPageSessionData, GetApiForumSectionPageSessionError, GetApiForumSectionPageSessionResponse, PostApiFsData, PostApiFsError, PostApiFsResponse, GetApiFsData, GetApiFsError, GetApiFsResponse, GetApiFsChildrenByIdData, GetApiFsChildrenByIdError, GetApiFsChildrenByIdResponse, GetApiFsByIdData, GetApiFsByIdError, GetApiFsByIdResponse, PatchApiFsByIdData, PatchApiFsByIdError, PatchApiFsByIdResponse, DeleteApiFsByIdData, DeleteApiFsByIdError, DeleteApiFsByIdResponse, PostApiInitializationCreateSuperAdminData, PostApiInitializationCreateSuperAdminError, PostApiInitializationCreateSuperAdminResponse, PostApiMallCartData, PostApiMallCartError, PostApiMallCartResponse, GetApiMallCartError, GetApiMallCartResponse, DeleteApiMallCartByIdData, DeleteApiMallCartByIdError, DeleteApiMallCartByIdResponse, PutApiMallCartByIdData, PutApiMallCartByIdError, PutApiMallCartByIdResponse, PutApiMallCartBatchData, PutApiMallCartBatchError, PutApiMallCartBatchResponse, PostApiMallGoodData, PostApiMallGoodError, PostApiMallGoodResponse, GetApiMallGoodData, GetApiMallGoodError, GetApiMallGoodResponse, DeleteApiMallGoodByIdData, DeleteApiMallGoodByIdError, DeleteApiMallGoodByIdResponse, PutApiMallGoodByIdData, PutApiMallGoodByIdError, PutApiMallGoodByIdResponse, GetApiMallGoodByIdData, GetApiMallGoodByIdError, GetApiMallGoodByIdResponse, GetApiMallGoodPaginateData, GetApiMallGoodPaginateError, GetApiMallGoodPaginateResponse, PostApiMallGoodCommentData, PostApiMallGoodCommentError, PostApiMallGoodCommentResponse, DeleteApiMallGoodCommentByIdData, DeleteApiMallGoodCommentByIdError, DeleteApiMallGoodCommentByIdResponse, GetApiMallGoodCommentPageByCursorData, GetApiMallGoodCommentPageByCursorError, GetApiMallGoodCommentPageByCursorResponse, GetApiMallGoodCommentPageData, GetApiMallGoodCommentPageError, GetApiMallGoodCommentPageResponse, PostApiMallGoodGroupData, PostApiMallGoodGroupError, PostApiMallGoodGroupResponse, GetApiMallGoodGroupError, GetApiMallGoodGroupResponse, DeleteApiMallGoodGroupByIdData, DeleteApiMallGoodGroupByIdError, DeleteApiMallGoodGroupByIdResponse, PutApiMallGoodGroupByIdData, PutApiMallGoodGroupByIdError, PutApiMallGoodGroupByIdResponse, GetApiMallGoodGroupByIdData, GetApiMallGoodGroupByIdError, GetApiMallGoodGroupByIdResponse, GetApiMallGoodGroupTreeError, GetApiMallGoodGroupTreeResponse, PostApiMallGoodRelationData, PostApiMallGoodRelationError, PostApiMallGoodRelationResponse, DeleteApiMallGoodRelationByIdData, DeleteApiMallGoodRelationByIdError, DeleteApiMallGoodRelationByIdResponse, GetApiMallGoodRelationItemData, GetApiMallGoodRelationItemError, GetApiMallGoodRelationItemResponse, PostApiMallGoodTagData, PostApiMallGoodTagError, PostApiMallGoodTagResponse, GetApiMallGoodTagError, GetApiMallGoodTagResponse, DeleteApiMallGoodTagByIdData, DeleteApiMallGoodTagByIdError, DeleteApiMallGoodTagByIdResponse, PutApiMallGoodTagByIdData, PutApiMallGoodTagByIdError, PutApiMallGoodTagByIdResponse, GetApiMallGoodTagByIdData, GetApiMallGoodTagByIdError, GetApiMallGoodTagByIdResponse, GetApiMallGoodTagPageData, GetApiMallGoodTagPageError, GetApiMallGoodTagPageResponse, PostApiMallOrderData, PostApiMallOrderError, PostApiMallOrderResponse, GetApiMallOrderPageByCursorSessionData, GetApiMallOrderPageByCursorSessionError, GetApiMallOrderPageByCursorSessionResponse, GetApiMallOrderPageData, GetApiMallOrderPageError, GetApiMallOrderPageResponse, GetApiMallOrderByIdData, GetApiMallOrderByIdError, GetApiMallOrderByIdResponse, PostApiMallShopData, PostApiMallShopError, PostApiMallShopResponse, GetApiMallShopError, GetApiMallShopResponse, DeleteApiMallShopByIdData, DeleteApiMallShopByIdError, DeleteApiMallShopByIdResponse, PutApiMallShopByIdData, PutApiMallShopByIdError, PutApiMallShopByIdResponse, GetApiMallShopByIdData, GetApiMallShopByIdError, GetApiMallShopByIdResponse, GetApiMallShopPaginateData, GetApiMallShopPaginateError, GetApiMallShopPaginateResponse, GetApiResourcesError, GetApiResourcesResponse, PostApiResourcesData, PostApiResourcesError, PostApiResourcesResponse, GetApiResourcesPageData, GetApiResourcesPageError, GetApiResourcesPageResponse, GetApiResourcesByIdData, GetApiResourcesByIdError, GetApiResourcesByIdResponse, DeleteApiResourcesByIdData, DeleteApiResourcesByIdError, DeleteApiResourcesByIdResponse, PutApiResourcesByIdData, PutApiResourcesByIdError, PutApiResourcesByIdResponse, GetApiRolesError, GetApiRolesResponse, PostApiRolesData, PostApiRolesError, PostApiRolesResponse, GetApiRolesPageData, GetApiRolesPageError, GetApiRolesPageResponse, DeleteApiRolesByIdData, DeleteApiRolesByIdError, DeleteApiRolesByIdResponse, GetApiRolesByIdData, GetApiRolesByIdError, GetApiRolesByIdResponse, PutApiRolesByIdData, PutApiRolesByIdError, PutApiRolesByIdResponse, GetApiSessionUserError, GetApiSessionUserResponse, GetApiSessionResourcesError, GetApiSessionResourcesResponse, GetApiSettingByKeysData, GetApiSettingByKeysError, GetApiSettingByKeysResponse, PostApiSettingData, PostApiSettingError, PostApiSettingResponse, PostApiSmsTestData, PostApiSmsTestError, PostApiSmsTestResponse, PostApiSmsByTypeByPhoneData, PostApiSmsByTypeByPhoneError, PostApiSmsByTypeByPhoneResponse, GetApiUsersError, GetApiUsersResponse, PostApiUsersData, PostApiUsersError, PostApiUsersResponse, GetApiUsersPageData, GetApiUsersPageError, GetApiUsersPageResponse, DeleteApiUsersByIdData, DeleteApiUsersByIdError, DeleteApiUsersByIdResponse, GetApiUsersByIdData, GetApiUsersByIdError, GetApiUsersByIdResponse, PutApiUsersByIdData, PutApiUsersByIdError, PutApiUsersByIdResponse, DeleteApiUsersSessionError, DeleteApiUsersSessionResponse, PostApiUsersBindWeixinSessionData, PostApiUsersBindWeixinSessionError, PostApiUsersBindWeixinSessionResponse, PostApiUsersBindMobileSessionData, PostApiUsersBindMobileSessionError, PostApiUsersBindMobileSessionResponse, PostApiUsersBindMpMobileSessionData, PostApiUsersBindMpMobileSessionError, PostApiUsersBindMpMobileSessionResponse, PostApiUsersBindUsernameSessionData, PostApiUsersBindUsernameSessionError, PostApiUsersBindUsernameSessionResponse, GetApiWeixinData, GetApiWeixinError, GetApiWeixinResponse, PostApiWeixinData, PostApiWeixinError, PostApiWeixinResponse, GetApiWeixinPageData, GetApiWeixinPageError, GetApiWeixinPageResponse, DeleteApiWeixinByIdData, DeleteApiWeixinByIdError, DeleteApiWeixinByIdResponse, GetApiWeixinByIdData, GetApiWeixinByIdError, GetApiWeixinByIdResponse, PutApiWeixinByIdData, PutApiWeixinByIdError, PutApiWeixinByIdResponse, GetApiWeixinPlatformMiniProgramGetPhoneNumberByAppidData, GetApiWeixinPlatformMiniProgramGetPhoneNumberByAppidError, GetApiWeixinPlatformMiniProgramGetPhoneNumberByAppidResponse, GetApiWeixinPlatformMiniProgramCode2SessionByAppidData, GetApiWeixinPlatformMiniProgramCode2SessionByAppidError, GetApiWeixinPlatformMiniProgramCode2SessionByAppidResponse, GetApiWeixinPlatformOfficialAccountGetAccessTokenByAppidData, GetApiWeixinPlatformOfficialAccountGetAccessTokenByAppidError, GetApiWeixinPlatformOfficialAccountGetAccessTokenByAppidResponse, GetApiWeixinPlatformOfficialAccountGetNotifyUrlByAppidData, GetApiWeixinPlatformOfficialAccountGetNotifyUrlByAppidError, GetApiWeixinPlatformOfficialAccountGetNotifyUrlByAppidResponse, PostApiWeixinPlatformOfficialAccountJssdkGetSignatureByAppidData, PostApiWeixinPlatformOfficialAccountJssdkGetSignatureByAppidError, PostApiWeixinPlatformOfficialAccountJssdkGetSignatureByAppidResponse, GetApiWeixinPlatformOfficialAccountTemplatesByAppidData, GetApiWeixinPlatformOfficialAccountTemplatesByAppidError, GetApiWeixinPlatformOfficialAccountTemplatesByAppidResponse, DeleteApiWeixinPlatformOfficialAccountTemplatesByIdByAppidData, DeleteApiWeixinPlatformOfficialAccountTemplatesByIdByAppidError, DeleteApiWeixinPlatformOfficialAccountTemplatesByIdByAppidResponse, PostApiWeixinPlatformOfficialAccountSendByAppidData, PostApiWeixinPlatformOfficialAccountSendByAppidError, PostApiWeixinPlatformOfficialAccountSendByAppidResponse, PostApiWeixinPlatformPayCenterPayParamsByAppidByMchidData, PostApiWeixinPlatformPayCenterPayParamsByAppidByMchidError, PostApiWeixinPlatformPayCenterPayParamsByAppidByMchidResponse, GetApiWeixinOfficialAccountConfigWeixinByWeixinIdData, GetApiWeixinOfficialAccountConfigWeixinByWeixinIdError, GetApiWeixinOfficialAccountConfigWeixinByWeixinIdResponse, PutApiWeixinOfficialAccountConfigByIdData, PutApiWeixinOfficialAccountConfigByIdError, PutApiWeixinOfficialAccountConfigByIdResponse, PostApiWeixinPlatformOfficialAccountNotifyByAppidData, PostApiWeixinPlatformOfficialAccountNotifyByAppidError, PostApiWeixinPlatformOfficialAccountNotifyByAppidResponse, GetApiWeixinPlatformOfficialAccountNotifyByAppidData, GetApiWeixinPlatformOfficialAccountNotifyByAppidError, GetApiWeixinPlatformOfficialAccountNotifyByAppidResponse, GetApiWeixinPlatformOfficialAccountOauthOauthJumpInfoByAppidData, GetApiWeixinPlatformOfficialAccountOauthOauthJumpInfoByAppidError, GetApiWeixinPlatformOfficialAccountOauthOauthJumpInfoByAppidResponse, GetApiWeixinPlatformOfficialAccountOauthOauthJumpBaseByAppidData, GetApiWeixinPlatformOfficialAccountOauthOauthJumpBaseByAppidError, GetApiWeixinPlatformOfficialAccountOauthOauthJumpBaseByAppidResponse, PostApiWeixinPayData, PostApiWeixinPayError, PostApiWeixinPayResponse, GetApiWeixinPayError, GetApiWeixinPayResponse, DeleteApiWeixinPayByIdData, DeleteApiWeixinPayByIdError, DeleteApiWeixinPayByIdResponse, PutApiWeixinPayByIdData, PutApiWeixinPayByIdError, PutApiWeixinPayByIdResponse, GetApiWeixinPayByIdData, GetApiWeixinPayByIdError, GetApiWeixinPayByIdResponse, GetApiWeixinPayPageData, GetApiWeixinPayPageError, GetApiWeixinPayPageResponse, GetApiWeixinPlatformUserPaginateData, GetApiWeixinPlatformUserPaginateError, GetApiWeixinPlatformUserPaginateResponse } from './types.gen';

export const client = createClient(createConfig());

export class AddressService {
    /**
     * 当前登录用户添加地址
     */
    public static createSession<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PostApiAddressCreateSessionData, ThrowOnError>) {
        return (options?.client ?? client).post<PostApiAddressCreateSessionResponse, PostApiAddressCreateSessionError, ThrowOnError>({
            ...options,
            url: '/api/address/create/session'
        });
    }
    
    /**
     * 获取当前登录用户地址列表
     */
    public static getAllSession<ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiAddressGetAllSessionResponse, GetApiAddressGetAllSessionError, ThrowOnError>({
            ...options,
            url: '/api/address/getAll/session'
        });
    }
    
    /**
     * 删除登录用户指定id地址
     */
    public static removeSession<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<DeleteApiAddressByIdSessionData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteApiAddressByIdSessionResponse, DeleteApiAddressByIdSessionError, ThrowOnError>({
            ...options,
            url: '/api/address/{id}/session'
        });
    }
    
    /**
     * 更新登录用户指定id地址
     */
    public static updateSession<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PutApiAddressByIdSessionData, ThrowOnError>) {
        return (options?.client ?? client).put<PutApiAddressByIdSessionResponse, PutApiAddressByIdSessionError, ThrowOnError>({
            ...options,
            url: '/api/address/{id}/session'
        });
    }
    
    /**
     * 获取指定id地址数据
     */
    public static get<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetApiAddressByIdData, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiAddressByIdResponse, GetApiAddressByIdError, ThrowOnError>({
            ...options,
            url: '/api/address/{id}'
        });
    }
    
}

export class AiAliyunAccountService {
    /**
     * 新增阿里云账号信息
     */
    public static create<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PostApiAiAliyunAccountData, ThrowOnError>) {
        return (options?.client ?? client).post<PostApiAiAliyunAccountResponse, PostApiAiAliyunAccountError, ThrowOnError>({
            ...options,
            url: '/api/ai/aliyun/account'
        });
    }
    
    /**
     * 获取所有阿里云账号信息
     */
    public static getAll<ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiAiAliyunAccountResponse, GetApiAiAliyunAccountError, ThrowOnError>({
            ...options,
            url: '/api/ai/aliyun/account'
        });
    }
    
    /**
     * 获取分页阿里云账号信息
     */
    public static paginate<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetApiAiAliyunAccountPaginateData, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiAiAliyunAccountPaginateResponse, GetApiAiAliyunAccountPaginateError, ThrowOnError>({
            ...options,
            url: '/api/ai/aliyun/account/paginate'
        });
    }
    
    /**
     * 获取指定id百度账号信息
     */
    public static get<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetApiAiAliyunAccountByIdData, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiAiAliyunAccountByIdResponse, GetApiAiAliyunAccountByIdError, ThrowOnError>({
            ...options,
            url: '/api/ai/aliyun/account/{id}'
        });
    }
    
    /**
     * 更新指定id阿里云账号信息
     */
    public static update<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PatchApiAiAliyunAccountByIdData, ThrowOnError>) {
        return (options?.client ?? client).patch<PatchApiAiAliyunAccountByIdResponse, PatchApiAiAliyunAccountByIdError, ThrowOnError>({
            ...options,
            url: '/api/ai/aliyun/account/{id}'
        });
    }
    
    /**
     * 删除阿里云账号信息
     */
    public static remove<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<DeleteApiAiAliyunAccountByIdData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteApiAiAliyunAccountByIdResponse, DeleteApiAiAliyunAccountByIdError, ThrowOnError>({
            ...options,
            url: '/api/ai/aliyun/account/{id}'
        });
    }
    
}

export class AiAliyunMessageService {
    /**
     * 新增消息
     */
    public static create<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PostApiAiAliyunMessageData, ThrowOnError>) {
        return (options?.client ?? client).post<PostApiAiAliyunMessageResponse, PostApiAiAliyunMessageError, ThrowOnError>({
            ...options,
            url: '/api/ai/aliyun/message'
        });
    }
    
    /**
     * 获取历史消息
     */
    public static getHistory<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetApiAiAliyunMessageData, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiAiAliyunMessageResponse, GetApiAiAliyunMessageError, ThrowOnError>({
            ...options,
            url: '/api/ai/aliyun/message'
        });
    }
    
}

export class AiAliyunOcrService {
    /**
     * 新增ocr任务
     */
    public static create<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PostApiAiAliyunOcrData, ThrowOnError>) {
        return (options?.client ?? client).post<PostApiAiAliyunOcrResponse, PostApiAiAliyunOcrError, ThrowOnError>({
            ...options,
            url: '/api/ai/aliyun/ocr'
        });
    }
    
    /**
     * 获取所有ocr任务
     */
    public static getAll<ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiAiAliyunOcrResponse, GetApiAiAliyunOcrError, ThrowOnError>({
            ...options,
            url: '/api/ai/aliyun/ocr'
        });
    }
    
    /**
     * 获取分页ocr任务
     */
    public static paginate<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetApiAiAliyunOcrPaginateData, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiAiAliyunOcrPaginateResponse, GetApiAiAliyunOcrPaginateError, ThrowOnError>({
            ...options,
            url: '/api/ai/aliyun/ocr/paginate'
        });
    }
    
    /**
     * 获取指定id ocr任务
     */
    public static get<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetApiAiAliyunOcrByIdData, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiAiAliyunOcrByIdResponse, GetApiAiAliyunOcrByIdError, ThrowOnError>({
            ...options,
            url: '/api/ai/aliyun/ocr/{id}'
        });
    }
    
    /**
     * 执行指定id ocr任务
     */
    public static operate<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PutApiAiAliyunOcrByIdData, ThrowOnError>) {
        return (options?.client ?? client).put<PutApiAiAliyunOcrByIdResponse, PutApiAiAliyunOcrByIdError, ThrowOnError>({
            ...options,
            url: '/api/ai/aliyun/ocr/{id}'
        });
    }
    
}

export class AiAliyunServiceService {
    /**
     * 新增服务
     */
    public static create<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PostApiAiAliyunServiceData, ThrowOnError>) {
        return (options?.client ?? client).post<PostApiAiAliyunServiceResponse, PostApiAiAliyunServiceError, ThrowOnError>({
            ...options,
            url: '/api/ai/aliyun/service'
        });
    }
    
    /**
     * 获取所有服务
     */
    public static getAll<ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiAiAliyunServiceResponse, GetApiAiAliyunServiceError, ThrowOnError>({
            ...options,
            url: '/api/ai/aliyun/service'
        });
    }
    
    /**
     * 获取分页服务
     */
    public static paginate<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetApiAiAliyunServicePaginateData, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiAiAliyunServicePaginateResponse, GetApiAiAliyunServicePaginateError, ThrowOnError>({
            ...options,
            url: '/api/ai/aliyun/service/paginate'
        });
    }
    
    /**
     * 获取指定id服务
     */
    public static get<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetApiAiAliyunServiceByIdData, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiAiAliyunServiceByIdResponse, GetApiAiAliyunServiceByIdError, ThrowOnError>({
            ...options,
            url: '/api/ai/aliyun/service/{id}'
        });
    }
    
    /**
     * 更新指定id服务
     */
    public static update<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PatchApiAiAliyunServiceByIdData, ThrowOnError>) {
        return (options?.client ?? client).patch<PatchApiAiAliyunServiceByIdResponse, PatchApiAiAliyunServiceByIdError, ThrowOnError>({
            ...options,
            url: '/api/ai/aliyun/service/{id}'
        });
    }
    
    /**
     * 删除服务
     */
    public static remove<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<DeleteApiAiAliyunServiceByIdData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteApiAiAliyunServiceByIdResponse, DeleteApiAiAliyunServiceByIdError, ThrowOnError>({
            ...options,
            url: '/api/ai/aliyun/service/{id}'
        });
    }
    
}

export class AiAliyunSessionService {
    /**
     * 新增会话
     */
    public static create<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PostApiAiAliyunSessionData, ThrowOnError>) {
        return (options?.client ?? client).post<PostApiAiAliyunSessionResponse, PostApiAiAliyunSessionError, ThrowOnError>({
            ...options,
            url: '/api/ai/aliyun/session'
        });
    }
    
    /**
     * 获取所有会话
     */
    public static getAll<ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiAiAliyunSessionResponse, GetApiAiAliyunSessionError, ThrowOnError>({
            ...options,
            url: '/api/ai/aliyun/session'
        });
    }
    
    /**
     * 获取分页会话
     */
    public static paginate<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetApiAiAliyunSessionPaginateData, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiAiAliyunSessionPaginateResponse, GetApiAiAliyunSessionPaginateError, ThrowOnError>({
            ...options,
            url: '/api/ai/aliyun/session/paginate'
        });
    }
    
    /**
     * 获取指定id会话
     */
    public static get<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetApiAiAliyunSessionByIdData, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiAiAliyunSessionByIdResponse, GetApiAiAliyunSessionByIdError, ThrowOnError>({
            ...options,
            url: '/api/ai/aliyun/session/{id}'
        });
    }
    
    /**
     * 更新指定id会话
     */
    public static update<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PatchApiAiAliyunSessionByIdData, ThrowOnError>) {
        return (options?.client ?? client).patch<PatchApiAiAliyunSessionByIdResponse, PatchApiAiAliyunSessionByIdError, ThrowOnError>({
            ...options,
            url: '/api/ai/aliyun/session/{id}'
        });
    }
    
    /**
     * 删除服务
     */
    public static remove<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<DeleteApiAiAliyunSessionByIdData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteApiAiAliyunSessionByIdResponse, DeleteApiAiAliyunSessionByIdError, ThrowOnError>({
            ...options,
            url: '/api/ai/aliyun/session/{id}'
        });
    }
    
}

export class AiBaiduAccountService {
    /**
     * 新增百度账号信息
     */
    public static create<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PostApiAiBaiduAccountData, ThrowOnError>) {
        return (options?.client ?? client).post<PostApiAiBaiduAccountResponse, PostApiAiBaiduAccountError, ThrowOnError>({
            ...options,
            url: '/api/ai/baidu/account'
        });
    }
    
    /**
     * 获取所有百度账号信息
     */
    public static getAll<ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiAiBaiduAccountResponse, GetApiAiBaiduAccountError, ThrowOnError>({
            ...options,
            url: '/api/ai/baidu/account'
        });
    }
    
    /**
     * 获取分页百度账号信息
     */
    public static paginate<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetApiAiBaiduAccountPaginateData, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiAiBaiduAccountPaginateResponse, GetApiAiBaiduAccountPaginateError, ThrowOnError>({
            ...options,
            url: '/api/ai/baidu/account/paginate'
        });
    }
    
    /**
     * 获取指定id百度账号信息
     */
    public static get<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetApiAiBaiduAccountByIdData, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiAiBaiduAccountByIdResponse, GetApiAiBaiduAccountByIdError, ThrowOnError>({
            ...options,
            url: '/api/ai/baidu/account/{id}'
        });
    }
    
    /**
     * 更新指定id百度账号信息
     */
    public static update<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PatchApiAiBaiduAccountByIdData, ThrowOnError>) {
        return (options?.client ?? client).patch<PatchApiAiBaiduAccountByIdResponse, PatchApiAiBaiduAccountByIdError, ThrowOnError>({
            ...options,
            url: '/api/ai/baidu/account/{id}'
        });
    }
    
    /**
     * 删除百度账号信息
     */
    public static remove<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<DeleteApiAiBaiduAccountByIdData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteApiAiBaiduAccountByIdResponse, DeleteApiAiBaiduAccountByIdError, ThrowOnError>({
            ...options,
            url: '/api/ai/baidu/account/{id}'
        });
    }
    
}

export class AiBaiduMessageService {
    /**
     * 新增百度消息
     */
    public static create<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PostApiAiBaiduMessageData, ThrowOnError>) {
        return (options?.client ?? client).post<PostApiAiBaiduMessageResponse, PostApiAiBaiduMessageError, ThrowOnError>({
            ...options,
            url: '/api/ai/baidu/message'
        });
    }
    
    /**
     * 获取历史消息
     */
    public static getHistory<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetApiAiBaiduMessageData, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiAiBaiduMessageResponse, GetApiAiBaiduMessageError, ThrowOnError>({
            ...options,
            url: '/api/ai/baidu/message'
        });
    }
    
}

export class AiBaiduOcrService {
    /**
     * 新增ocr任务
     */
    public static create<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PostApiAiBaiduOcrData, ThrowOnError>) {
        return (options?.client ?? client).post<PostApiAiBaiduOcrResponse, PostApiAiBaiduOcrError, ThrowOnError>({
            ...options,
            url: '/api/ai/baidu/ocr'
        });
    }
    
    /**
     * 获取所有ocr任务
     */
    public static getAll<ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiAiBaiduOcrResponse, GetApiAiBaiduOcrError, ThrowOnError>({
            ...options,
            url: '/api/ai/baidu/ocr'
        });
    }
    
    /**
     * 获取分页ocr任务
     */
    public static paginate<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetApiAiBaiduOcrPaginateData, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiAiBaiduOcrPaginateResponse, GetApiAiBaiduOcrPaginateError, ThrowOnError>({
            ...options,
            url: '/api/ai/baidu/ocr/paginate'
        });
    }
    
    /**
     * 获取指定id ocr任务
     */
    public static get<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetApiAiBaiduOcrByIdData, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiAiBaiduOcrByIdResponse, GetApiAiBaiduOcrByIdError, ThrowOnError>({
            ...options,
            url: '/api/ai/baidu/ocr/{id}'
        });
    }
    
}

export class AiBaiduServiceService {
    /**
     * 新增服务
     */
    public static create<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PostApiAiBaiduServiceData, ThrowOnError>) {
        return (options?.client ?? client).post<PostApiAiBaiduServiceResponse, PostApiAiBaiduServiceError, ThrowOnError>({
            ...options,
            url: '/api/ai/baidu/service'
        });
    }
    
    /**
     * 获取所有服务
     */
    public static getAll<ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiAiBaiduServiceResponse, GetApiAiBaiduServiceError, ThrowOnError>({
            ...options,
            url: '/api/ai/baidu/service'
        });
    }
    
    /**
     * 获取分页服务
     */
    public static paginate<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetApiAiBaiduServicePaginateData, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiAiBaiduServicePaginateResponse, GetApiAiBaiduServicePaginateError, ThrowOnError>({
            ...options,
            url: '/api/ai/baidu/service/paginate'
        });
    }
    
    /**
     * 获取指定id服务
     */
    public static get<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetApiAiBaiduServiceByIdData, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiAiBaiduServiceByIdResponse, GetApiAiBaiduServiceByIdError, ThrowOnError>({
            ...options,
            url: '/api/ai/baidu/service/{id}'
        });
    }
    
    /**
     * 更新指定id服务
     */
    public static update<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PatchApiAiBaiduServiceByIdData, ThrowOnError>) {
        return (options?.client ?? client).patch<PatchApiAiBaiduServiceByIdResponse, PatchApiAiBaiduServiceByIdError, ThrowOnError>({
            ...options,
            url: '/api/ai/baidu/service/{id}'
        });
    }
    
    /**
     * 删除服务
     */
    public static remove<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<DeleteApiAiBaiduServiceByIdData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteApiAiBaiduServiceByIdResponse, DeleteApiAiBaiduServiceByIdError, ThrowOnError>({
            ...options,
            url: '/api/ai/baidu/service/{id}'
        });
    }
    
}

export class AiBaiduSessionService {
    /**
     * 新增会话
     */
    public static create<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PostApiAiBaiduSessionData, ThrowOnError>) {
        return (options?.client ?? client).post<PostApiAiBaiduSessionResponse, PostApiAiBaiduSessionError, ThrowOnError>({
            ...options,
            url: '/api/ai/baidu/session'
        });
    }
    
    /**
     * 获取所有会话
     */
    public static getAll<ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiAiBaiduSessionResponse, GetApiAiBaiduSessionError, ThrowOnError>({
            ...options,
            url: '/api/ai/baidu/session'
        });
    }
    
    /**
     * 获取分页会话
     */
    public static paginate<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetApiAiBaiduSessionPaginateData, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiAiBaiduSessionPaginateResponse, GetApiAiBaiduSessionPaginateError, ThrowOnError>({
            ...options,
            url: '/api/ai/baidu/session/paginate'
        });
    }
    
    /**
     * 获取指定id会话
     */
    public static get<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetApiAiBaiduSessionByIdData, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiAiBaiduSessionByIdResponse, GetApiAiBaiduSessionByIdError, ThrowOnError>({
            ...options,
            url: '/api/ai/baidu/session/{id}'
        });
    }
    
    /**
     * 更新指定id会话
     */
    public static update<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PatchApiAiBaiduSessionByIdData, ThrowOnError>) {
        return (options?.client ?? client).patch<PatchApiAiBaiduSessionByIdResponse, PatchApiAiBaiduSessionByIdError, ThrowOnError>({
            ...options,
            url: '/api/ai/baidu/session/{id}'
        });
    }
    
    /**
     * 删除服务
     */
    public static remove<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<DeleteApiAiBaiduSessionByIdData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteApiAiBaiduSessionByIdResponse, DeleteApiAiBaiduSessionByIdError, ThrowOnError>({
            ...options,
            url: '/api/ai/baidu/session/{id}'
        });
    }
    
}

export class AiCommonServiceTypeService {
    /**
     * 新增服务类型
     */
    public static create<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PostApiAiCommonServiceTypeData, ThrowOnError>) {
        return (options?.client ?? client).post<PostApiAiCommonServiceTypeResponse, PostApiAiCommonServiceTypeError, ThrowOnError>({
            ...options,
            url: '/api/ai/common/service-type'
        });
    }
    
    /**
     * 获取所有ai服务类型
     */
    public static getAll<ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiAiCommonServiceTypeResponse, GetApiAiCommonServiceTypeError, ThrowOnError>({
            ...options,
            url: '/api/ai/common/service-type'
        });
    }
    
    /**
     * 获取指定id服务类型
     */
    public static get<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetApiAiCommonServiceTypeByIdData, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiAiCommonServiceTypeByIdResponse, GetApiAiCommonServiceTypeByIdError, ThrowOnError>({
            ...options,
            url: '/api/ai/common/service-type/{id}'
        });
    }
    
    /**
     * 更新指定id服务类型
     */
    public static update<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PatchApiAiCommonServiceTypeByIdData, ThrowOnError>) {
        return (options?.client ?? client).patch<PatchApiAiCommonServiceTypeByIdResponse, PatchApiAiCommonServiceTypeByIdError, ThrowOnError>({
            ...options,
            url: '/api/ai/common/service-type/{id}'
        });
    }
    
    /**
     * 删除服务类型
     */
    public static remove<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<DeleteApiAiCommonServiceTypeByIdData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteApiAiCommonServiceTypeByIdResponse, DeleteApiAiCommonServiceTypeByIdError, ThrowOnError>({
            ...options,
            url: '/api/ai/common/service-type/{id}'
        });
    }
    
}

export class AreaService {
    /**
     * 获取省份列表
     */
    public static getProvinces<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetApiAreaProvincesData, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiAreaProvincesResponse, GetApiAreaProvincesError, ThrowOnError>({
            ...options,
            url: '/api/area/provinces'
        });
    }
    
    /**
     * 获取城市列表
     */
    public static getCities<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetApiAreaCitiesData, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiAreaCitiesResponse, GetApiAreaCitiesError, ThrowOnError>({
            ...options,
            url: '/api/area/cities'
        });
    }
    
    /**
     * 获取区列表
     */
    public static getRegions<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetApiAreaRegionsData, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiAreaRegionsResponse, GetApiAreaRegionsError, ThrowOnError>({
            ...options,
            url: '/api/area/regions'
        });
    }
    
    /**
     * 获取省市区结构
     */
    public static getTreeData<ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiAreaTreeDataResponse, GetApiAreaTreeDataError, ThrowOnError>({
            ...options,
            url: '/api/area/treeData'
        });
    }
    
}

export class AuthService {
    /**
     * 验证auth
     */
    public static verify<ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiAuthVerifyResponse, GetApiAuthVerifyError, ThrowOnError>({
            ...options,
            url: '/api/auth/verify'
        });
    }
    
    /**
     * 注销登录用户
     */
    public static cancellation<ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteApiAuthCancellationResponse, DeleteApiAuthCancellationError, ThrowOnError>({
            ...options,
            url: '/api/auth/cancellation'
        });
    }
    
    /**
     * 用户名密码登录
     */
    public static login<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PostApiAuthLoginData, ThrowOnError>) {
        return (options?.client ?? client).post<PostApiAuthLoginResponse, PostApiAuthLoginError, ThrowOnError>({
            ...options,
            url: '/api/auth/login'
        });
    }
    
    /**
     * 手机验证码登录
     */
    public static loginBySmsCode<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PostApiAuthLoginBySmsCodeData, ThrowOnError>) {
        return (options?.client ?? client).post<PostApiAuthLoginBySmsCodeResponse, PostApiAuthLoginBySmsCodeError, ThrowOnError>({
            ...options,
            url: '/api/auth/loginBySmsCode'
        });
    }
    
    /**
     * 微信登录
     */
    public static loginByWeixin<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PostApiAuthLoginByWeixinData, ThrowOnError>) {
        return (options?.client ?? client).post<PostApiAuthLoginByWeixinResponse, PostApiAuthLoginByWeixinError, ThrowOnError>({
            ...options,
            url: '/api/auth/loginByWeixin'
        });
    }
    
    /**
     * 微信小程序手机号登录
     */
    public static loginByWeixinMobile<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PostApiAuthLoginByWeixinMobileData, ThrowOnError>) {
        return (options?.client ?? client).post<PostApiAuthLoginByWeixinMobileResponse, PostApiAuthLoginByWeixinMobileError, ThrowOnError>({
            ...options,
            url: '/api/auth/loginByWeixinMobile'
        });
    }
    
    /**
     * 类似oauth2的code登录
     */
    public static loginByCode<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PostApiAuthLoginByCodeData, ThrowOnError>) {
        return (options?.client ?? client).post<PostApiAuthLoginByCodeResponse, PostApiAuthLoginByCodeError, ThrowOnError>({
            ...options,
            url: '/api/auth/loginByCode'
        });
    }
    
    /**
     * 生成登录code
     */
    public static generateLoginCode<ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiAuthAuthenticateResponse, GetApiAuthAuthenticateError, ThrowOnError>({
            ...options,
            url: '/api/auth/authenticate'
        });
    }
    
}

export class BiChartMetaService {
    /**
     * 获取所有信息
     */
    public static getAll<ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiBiChartMetaResponse, GetApiBiChartMetaError, ThrowOnError>({
            ...options,
            url: '/api/bi/chart/meta'
        });
    }
    
    /**
     * 创建
     */
    public static create<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PostApiBiChartMetaData, ThrowOnError>) {
        return (options?.client ?? client).post<PostApiBiChartMetaResponse, PostApiBiChartMetaError, ThrowOnError>({
            ...options,
            url: '/api/bi/chart/meta'
        });
    }
    
    /**
     * 获取指定id信息
     */
    public static get<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetApiBiChartMetaByIdData, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiBiChartMetaByIdResponse, GetApiBiChartMetaByIdError, ThrowOnError>({
            ...options,
            url: '/api/bi/chart/meta/{id}'
        });
    }
    
    /**
     * 删除指定id
     */
    public static remove<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<DeleteApiBiChartMetaByIdData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteApiBiChartMetaByIdResponse, DeleteApiBiChartMetaByIdError, ThrowOnError>({
            ...options,
            url: '/api/bi/chart/meta/{id}'
        });
    }
    
    /**
     * 更新指定id
     */
    public static update<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PutApiBiChartMetaByIdData, ThrowOnError>) {
        return (options?.client ?? client).put<PutApiBiChartMetaByIdResponse, PutApiBiChartMetaByIdError, ThrowOnError>({
            ...options,
            url: '/api/bi/chart/meta/{id}'
        });
    }
    
    /**
     * 板块分页数据
     */
    public static paginate<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetApiBiChartMetaPageAllData, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiBiChartMetaPageAllResponse, GetApiBiChartMetaPageAllError, ThrowOnError>({
            ...options,
            url: '/api/bi/chart/meta/page/all'
        });
    }
    
}

export class BiChartSettingService {
    /**
     * 获取指定id信息
     */
    public static get<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetApiBiChartMetaByMetaIdSettingData, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiBiChartMetaByMetaIdSettingResponse, GetApiBiChartMetaByMetaIdSettingError, ThrowOnError>({
            ...options,
            url: '/api/bi/chart/meta/{metaId}/setting'
        });
    }
    
    /**
     * 创建
     */
    public static create<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PostApiBiChartMetaByMetaIdSettingData, ThrowOnError>) {
        return (options?.client ?? client).post<PostApiBiChartMetaByMetaIdSettingResponse, PostApiBiChartMetaByMetaIdSettingError, ThrowOnError>({
            ...options,
            url: '/api/bi/chart/meta/{metaId}/setting'
        });
    }
    
    /**
     * 更新指定id
     */
    public static update<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PutApiBiChartSettingByIdData, ThrowOnError>) {
        return (options?.client ?? client).put<PutApiBiChartSettingByIdResponse, PutApiBiChartSettingByIdError, ThrowOnError>({
            ...options,
            url: '/api/bi/chart/setting/{id}'
        });
    }
    
}

export class BiDataMetaService {
    /**
     * 获取所有信息
     */
    public static getAll<ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiBiDataMetaResponse, GetApiBiDataMetaError, ThrowOnError>({
            ...options,
            url: '/api/bi/data/meta'
        });
    }
    
    /**
     * 创建
     */
    public static create<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PostApiBiDataMetaData, ThrowOnError>) {
        return (options?.client ?? client).post<PostApiBiDataMetaResponse, PostApiBiDataMetaError, ThrowOnError>({
            ...options,
            url: '/api/bi/data/meta'
        });
    }
    
    /**
     * 获取指定id信息
     */
    public static get<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetApiBiDataMetaByIdData, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiBiDataMetaByIdResponse, GetApiBiDataMetaByIdError, ThrowOnError>({
            ...options,
            url: '/api/bi/data/meta/{id}'
        });
    }
    
    /**
     * 删除指定id
     */
    public static remove<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<DeleteApiBiDataMetaByIdData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteApiBiDataMetaByIdResponse, DeleteApiBiDataMetaByIdError, ThrowOnError>({
            ...options,
            url: '/api/bi/data/meta/{id}'
        });
    }
    
    /**
     * 更新指定id
     */
    public static update<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PutApiBiDataMetaByIdData, ThrowOnError>) {
        return (options?.client ?? client).put<PutApiBiDataMetaByIdResponse, PutApiBiDataMetaByIdError, ThrowOnError>({
            ...options,
            url: '/api/bi/data/meta/{id}'
        });
    }
    
    /**
     * 板块分页数据
     */
    public static paginate<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetApiBiDataMetaPageAllData, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiBiDataMetaPageAllResponse, GetApiBiDataMetaPageAllError, ThrowOnError>({
            ...options,
            url: '/api/bi/data/meta/page/all'
        });
    }
    
}

export class BiDataRuleService {
    /**
     * 获取指定id信息
     */
    public static get<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetApiBiDataMetaByMetaIdRuleData, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiBiDataMetaByMetaIdRuleResponse, GetApiBiDataMetaByMetaIdRuleError, ThrowOnError>({
            ...options,
            url: '/api/bi/data/meta/{metaId}/rule'
        });
    }
    
    /**
     * 创建
     */
    public static create<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PostApiBiDataMetaByMetaIdRuleData, ThrowOnError>) {
        return (options?.client ?? client).post<PostApiBiDataMetaByMetaIdRuleResponse, PostApiBiDataMetaByMetaIdRuleError, ThrowOnError>({
            ...options,
            url: '/api/bi/data/meta/{metaId}/rule'
        });
    }
    
    /**
     * 更新指定id
     */
    public static update<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PutApiBiDataRuleByIdData, ThrowOnError>) {
        return (options?.client ?? client).put<PutApiBiDataRuleByIdResponse, PutApiBiDataRuleByIdError, ThrowOnError>({
            ...options,
            url: '/api/bi/data/rule/{id}'
        });
    }
    
}

export class BiDataStructService {
    /**
     * 获取所有信息
     */
    public static getAll<ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiBiDataMetaByMetaIdStructResponse, GetApiBiDataMetaByMetaIdStructError, ThrowOnError>({
            ...options,
            url: '/api/bi/data/meta/{metaId}/struct'
        });
    }
    
    /**
     * 创建
     */
    public static create<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PostApiBiDataMetaByMetaIdStructData, ThrowOnError>) {
        return (options?.client ?? client).post<PostApiBiDataMetaByMetaIdStructResponse, PostApiBiDataMetaByMetaIdStructError, ThrowOnError>({
            ...options,
            url: '/api/bi/data/meta/{metaId}/struct'
        });
    }
    
    /**
     * 获取指定id信息
     */
    public static get<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetApiBiDataStructByIdData, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiBiDataStructByIdResponse, GetApiBiDataStructByIdError, ThrowOnError>({
            ...options,
            url: '/api/bi/data/struct/{id}'
        });
    }
    
    /**
     * 删除指定id
     */
    public static remove<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<DeleteApiBiDataStructByIdData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteApiBiDataStructByIdResponse, DeleteApiBiDataStructByIdError, ThrowOnError>({
            ...options,
            url: '/api/bi/data/struct/{id}'
        });
    }
    
    /**
     * 更新指定id
     */
    public static update<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PutApiBiDataStructByIdData, ThrowOnError>) {
        return (options?.client ?? client).put<PutApiBiDataStructByIdResponse, PutApiBiDataStructByIdError, ThrowOnError>({
            ...options,
            url: '/api/bi/data/struct/{id}'
        });
    }
    
}

export class BiDataViewService {
    /**
     * 数据数据预览
     */
    public static get<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetApiBiDataViewByMetaIdData, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiBiDataViewByMetaIdResponse, GetApiBiDataViewByMetaIdError, ThrowOnError>({
            ...options,
            url: '/api/bi/data/view/{metaId}'
        });
    }
    
}

export class ChatContactsService {
    /**
     * 添加联系人
     */
    public static create<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PostApiChatContactsData, ThrowOnError>) {
        return (options?.client ?? client).post<PostApiChatContactsResponse, PostApiChatContactsError, ThrowOnError>({
            ...options,
            url: '/api/chat/contacts'
        });
    }
    
    /**
     * 获取所有联系人
     */
    public static get<ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiChatContactsResponse, GetApiChatContactsError, ThrowOnError>({
            ...options,
            url: '/api/chat/contacts'
        });
    }
    
    /**
     * 删除联系人
     */
    public static remove<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<DeleteApiChatContactsByIdData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteApiChatContactsByIdResponse, DeleteApiChatContactsByIdError, ThrowOnError>({
            ...options,
            url: '/api/chat/contacts/{id}'
        });
    }
    
    /**
     * 更新联系人
     */
    public static updateStatus<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PutApiChatContactsByIdData, ThrowOnError>) {
        return (options?.client ?? client).put<PutApiChatContactsByIdResponse, PutApiChatContactsByIdError, ThrowOnError>({
            ...options,
            url: '/api/chat/contacts/{id}'
        });
    }
    
}

export class ChatMessageService {
    /**
     * 发送聊天
     */
    public static create<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PostApiChatMessageData, ThrowOnError>) {
        return (options?.client ?? client).post<PostApiChatMessageResponse, PostApiChatMessageError, ThrowOnError>({
            ...options,
            url: '/api/chat/message'
        });
    }
    
    /**
     * 游标分页
     */
    public static findWithCursor<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetApiChatMessageCursorData, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiChatMessageCursorResponse, GetApiChatMessageCursorError, ThrowOnError>({
            ...options,
            url: '/api/chat/message/cursor'
        });
    }
    
}

export class ChatSessionService {
    /**
     * 添加聊天会话
     */
    public static create<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PostApiChatSessionData, ThrowOnError>) {
        return (options?.client ?? client).post<PostApiChatSessionResponse, PostApiChatSessionError, ThrowOnError>({
            ...options,
            url: '/api/chat/session'
        });
    }
    
    /**
     * 获取所有联系人
     */
    public static get<ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiChatSessionResponse, GetApiChatSessionError, ThrowOnError>({
            ...options,
            url: '/api/chat/session'
        });
    }
    
    /**
     * 删除聊天会话
     */
    public static remove<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<DeleteApiChatSessionByIdData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteApiChatSessionByIdResponse, DeleteApiChatSessionByIdError, ThrowOnError>({
            ...options,
            url: '/api/chat/session/{id}'
        });
    }
    
}

export class DefaultService {
    public static WeixinPayCenterNotifyController_commonPay<ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) {
        return (options?.client ?? client).post<PostApiWeixinPlatformPayCenterNotifyCommonPayByAppidByMchidResponse, PostApiWeixinPlatformPayCenterNotifyCommonPayByAppidByMchidError, ThrowOnError>({
            ...options,
            url: '/api/weixin-platform/pay-center/notify/commonPay/{appid}/{mchid}'
        });
    }
    
    public static WeixinPayCenterNotifyController_nativePay<ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) {
        return (options?.client ?? client).post<PostApiWeixinPlatformPayCenterNotifyNativePayByAppidByMchidResponse, PostApiWeixinPlatformPayCenterNotifyNativePayByAppidByMchidError, ThrowOnError>({
            ...options,
            url: '/api/weixin-platform/pay-center/notify/nativePay/{appid}/{mchid}'
        });
    }
    
    public static WeixinPayCenterNotifyController_refund<ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) {
        return (options?.client ?? client).post<PostApiWeixinPlatformPayCenterNotifyRefundByAppidByMchidResponse, PostApiWeixinPlatformPayCenterNotifyRefundByAppidByMchidError, ThrowOnError>({
            ...options,
            url: '/api/weixin-platform/pay-center/notify/refund/{appid}/{mchid}'
        });
    }
    
    public static AiSessionController_create<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PostApiAiSessionData, ThrowOnError>) {
        return (options?.client ?? client).post<PostApiAiSessionResponse, PostApiAiSessionError, ThrowOnError>({
            ...options,
            url: '/api/ai-session'
        });
    }
    
    public static AiSessionController_findAll<ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiAiSessionResponse, GetApiAiSessionError, ThrowOnError>({
            ...options,
            url: '/api/ai-session'
        });
    }
    
    public static AiSessionController_findOne<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetApiAiSessionByIdData, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiAiSessionByIdResponse, GetApiAiSessionByIdError, ThrowOnError>({
            ...options,
            url: '/api/ai-session/{id}'
        });
    }
    
    public static AiSessionController_update<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PatchApiAiSessionByIdData, ThrowOnError>) {
        return (options?.client ?? client).patch<PatchApiAiSessionByIdResponse, PatchApiAiSessionByIdError, ThrowOnError>({
            ...options,
            url: '/api/ai-session/{id}'
        });
    }
    
    public static AiSessionController_remove<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<DeleteApiAiSessionByIdData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteApiAiSessionByIdResponse, DeleteApiAiSessionByIdError, ThrowOnError>({
            ...options,
            url: '/api/ai-session/{id}'
        });
    }
    
    public static BiViewMetaController_create<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PostApiBiViewMetaData, ThrowOnError>) {
        return (options?.client ?? client).post<PostApiBiViewMetaResponse, PostApiBiViewMetaError, ThrowOnError>({
            ...options,
            url: '/api/bi-view-meta'
        });
    }
    
    public static BiViewMetaController_findAll<ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiBiViewMetaResponse, GetApiBiViewMetaError, ThrowOnError>({
            ...options,
            url: '/api/bi-view-meta'
        });
    }
    
    public static BiViewMetaController_findOne<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetApiBiViewMetaByIdData, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiBiViewMetaByIdResponse, GetApiBiViewMetaByIdError, ThrowOnError>({
            ...options,
            url: '/api/bi-view-meta/{id}'
        });
    }
    
    public static BiViewMetaController_update<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PatchApiBiViewMetaByIdData, ThrowOnError>) {
        return (options?.client ?? client).patch<PatchApiBiViewMetaByIdResponse, PatchApiBiViewMetaByIdError, ThrowOnError>({
            ...options,
            url: '/api/bi-view-meta/{id}'
        });
    }
    
    public static BiViewMetaController_remove<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<DeleteApiBiViewMetaByIdData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteApiBiViewMetaByIdResponse, DeleteApiBiViewMetaByIdError, ThrowOnError>({
            ...options,
            url: '/api/bi-view-meta/{id}'
        });
    }
    
}

export class FileService {
    public static uploadFile<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PostApiFileUploadData, ThrowOnError>) {
        return (options?.client ?? client).post<PostApiFileUploadResponse, PostApiFileUploadError, ThrowOnError>({
            ...options,
            ...formDataBodySerializer,
            headers: {
                'Content-Type': null,
                ...options?.headers
            },
            url: '/api/file/upload'
        });
    }
    
    public static uploadFiles<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PostApiFileUploadsData, ThrowOnError>) {
        return (options?.client ?? client).post<PostApiFileUploadsResponse, PostApiFileUploadsError, ThrowOnError>({
            ...options,
            ...formDataBodySerializer,
            headers: {
                'Content-Type': null,
                ...options?.headers
            },
            url: '/api/file/uploads'
        });
    }
    
    /**
     * 获取id文件信息
     */
    public static get<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetApiFileByIdData, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiFileByIdResponse, GetApiFileByIdError, ThrowOnError>({
            ...options,
            url: '/api/file/{id}'
        });
    }
    
}

export class FileStaticService {
    public static view<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetApiFileStaticByIdData, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiFileStaticByIdResponse, GetApiFileStaticByIdError, ThrowOnError>({
            ...options,
            url: '/api/file/static/{id}'
        });
    }
    
}

export class ForumCommentService {
    /**
     * 创建评论
     */
    public static create<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PostApiForumCommentData, ThrowOnError>) {
        return (options?.client ?? client).post<PostApiForumCommentResponse, PostApiForumCommentError, ThrowOnError>({
            ...options,
            url: '/api/forum/comment'
        });
    }
    
    /**
     * 获取帖子下所有评论
     */
    public static getAll<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetApiForumCommentData, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiForumCommentResponse, GetApiForumCommentError, ThrowOnError>({
            ...options,
            url: '/api/forum/comment'
        });
    }
    
    /**
     * 删除指定id评论
     */
    public static remove<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<DeleteApiForumCommentByIdData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteApiForumCommentByIdResponse, DeleteApiForumCommentByIdError, ThrowOnError>({
            ...options,
            url: '/api/forum/comment/{id}'
        });
    }
    
    /**
     * 获取指定id评论
     */
    public static get<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetApiForumCommentByIdData, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiForumCommentByIdResponse, GetApiForumCommentByIdError, ThrowOnError>({
            ...options,
            url: '/api/forum/comment/{id}'
        });
    }
    
    /**
     * 获取帖子下分页评论
     */
    public static paginate<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetApiForumCommentPageAllData, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiForumCommentPageAllResponse, GetApiForumCommentPageAllError, ThrowOnError>({
            ...options,
            url: '/api/forum/comment/page/all'
        });
    }
    
    /**
     * 获取帖子下登录用户的分页评论
     */
    public static paginateSession<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetApiForumCommentPageSessionData, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiForumCommentPageSessionResponse, GetApiForumCommentPageSessionError, ThrowOnError>({
            ...options,
            url: '/api/forum/comment/page/session'
        });
    }
    
    /**
     * 获取帖子下评论数量
     */
    public static getCount<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetApiForumCommentCountAllData, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiForumCommentCountAllResponse, GetApiForumCommentCountAllError, ThrowOnError>({
            ...options,
            url: '/api/forum/comment/count/all'
        });
    }
    
    /**
     * 获取帖子下当前登录用户的评论数量
     */
    public static getCountSession<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetApiForumCommentCountSessionData, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiForumCommentCountSessionResponse, GetApiForumCommentCountSessionError, ThrowOnError>({
            ...options,
            url: '/api/forum/comment/count/session'
        });
    }
    
}

export class ForumPostService {
    /**
     * 创建帖子
     */
    public static create<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PostApiForumPostData, ThrowOnError>) {
        return (options?.client ?? client).post<PostApiForumPostResponse, PostApiForumPostError, ThrowOnError>({
            ...options,
            url: '/api/forum/post'
        });
    }
    
    /**
     * 获取所有帖子
     */
    public static getAll<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetApiForumPostData, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiForumPostResponse, GetApiForumPostError, ThrowOnError>({
            ...options,
            url: '/api/forum/post'
        });
    }
    
    /**
     * 删除帖子
     */
    public static remove<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<DeleteApiForumPostByIdData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteApiForumPostByIdResponse, DeleteApiForumPostByIdError, ThrowOnError>({
            ...options,
            url: '/api/forum/post/{id}'
        });
    }
    
    /**
     * 更新指定id帖子
     */
    public static update<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PutApiForumPostByIdData, ThrowOnError>) {
        return (options?.client ?? client).put<PutApiForumPostByIdResponse, PutApiForumPostByIdError, ThrowOnError>({
            ...options,
            url: '/api/forum/post/{id}'
        });
    }
    
    /**
     * 获取指定id帖子
     */
    public static get<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetApiForumPostByIdData, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiForumPostByIdResponse, GetApiForumPostByIdError, ThrowOnError>({
            ...options,
            url: '/api/forum/post/{id}'
        });
    }
    
    /**
     * 帖子分页数据
     */
    public static paginate<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetApiForumPostPageAllData, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiForumPostPageAllResponse, GetApiForumPostPageAllError, ThrowOnError>({
            ...options,
            url: '/api/forum/post/page/all'
        });
    }
    
    /**
     * 当前用户帖子分页数据
     */
    public static paginateSession<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetApiForumPostPageSessionData, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiForumPostPageSessionResponse, GetApiForumPostPageSessionError, ThrowOnError>({
            ...options,
            url: '/api/forum/post/page/session'
        });
    }
    
    /**
     * 帖子分页数据(游标)
     */
    public static paginateByCursor<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetApiForumPostPageCursorAllData, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiForumPostPageCursorAllResponse, GetApiForumPostPageCursorAllError, ThrowOnError>({
            ...options,
            url: '/api/forum/post/page/cursor/all'
        });
    }
    
    /**
     * 获取帖子数量
     */
    public static getCount<ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<GetApiForumPostCountAllData, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiForumPostCountAllResponse, GetApiForumPostCountAllError, ThrowOnError>({
            ...options,
            url: '/api/forum/post/count/all'
        });
    }
    
    /**
     * 获取登录用户帖子数量
     */
    public static getCountSession<ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<GetApiForumPostCountSessionData, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiForumPostCountSessionResponse, GetApiForumPostCountSessionError, ThrowOnError>({
            ...options,
            url: '/api/forum/post/count/session'
        });
    }
    
}

export class ForumPostRelationService {
    /**
     * 创建用户和帖子的关系
     */
    public static create<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PostApiForumPostRelationData, ThrowOnError>) {
        return (options?.client ?? client).post<PostApiForumPostRelationResponse, PostApiForumPostRelationError, ThrowOnError>({
            ...options,
            url: '/api/forum/post-relation'
        });
    }
    
    /**
     * 获取所有用户和帖子的关系
     */
    public static getAll<ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<GetApiForumPostRelationData, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiForumPostRelationResponse, GetApiForumPostRelationError, ThrowOnError>({
            ...options,
            url: '/api/forum/post-relation'
        });
    }
    
    /**
     * 删除用户和帖子的关系
     */
    public static remove<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<DeleteApiForumPostRelationByIdData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteApiForumPostRelationByIdResponse, DeleteApiForumPostRelationByIdError, ThrowOnError>({
            ...options,
            url: '/api/forum/post-relation/{id}'
        });
    }
    
    /**
     * 获取指定id的用户和帖子的关系
     */
    public static get<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetApiForumPostRelationByIdData, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiForumPostRelationByIdResponse, GetApiForumPostRelationByIdError, ThrowOnError>({
            ...options,
            url: '/api/forum/post-relation/{id}'
        });
    }
    
    /**
     * 获取登录用户的所有用户和帖子的关系
     */
    public static getAllSession<ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<GetApiForumPostRelationSessionInfoData, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiForumPostRelationSessionInfoResponse, GetApiForumPostRelationSessionInfoError, ThrowOnError>({
            ...options,
            url: '/api/forum/post-relation/session/info'
        });
    }
    
    /**
     * 获取用户和帖子的关系的分页数据
     */
    public static paginate<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetApiForumPostRelationPageAllData, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiForumPostRelationPageAllResponse, GetApiForumPostRelationPageAllError, ThrowOnError>({
            ...options,
            url: '/api/forum/post-relation/page/all'
        });
    }
    
    /**
     * 获取登录用户的用户和帖子的关系的分页数据
     */
    public static paginateSession<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetApiForumPostRelationPageSessionData, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiForumPostRelationPageSessionResponse, GetApiForumPostRelationPageSessionError, ThrowOnError>({
            ...options,
            url: '/api/forum/post-relation/page/session'
        });
    }
    
    /**
     * 获取用户和帖子的关系的数量
     */
    public static getCount<ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<GetApiForumPostRelationCountAllData, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiForumPostRelationCountAllResponse, GetApiForumPostRelationCountAllError, ThrowOnError>({
            ...options,
            url: '/api/forum/post-relation/count/all'
        });
    }
    
    /**
     * 获取登录用户的用户和帖子的关系的数量
     */
    public static getCountSession<ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<GetApiForumPostRelationCountSessionData, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiForumPostRelationCountSessionResponse, GetApiForumPostRelationCountSessionError, ThrowOnError>({
            ...options,
            url: '/api/forum/post-relation/count/session'
        });
    }
    
}

export class ForumSectionService {
    /**
     * 获取所有论坛版块信息
     */
    public static getAll<ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiForumSectionResponse, GetApiForumSectionError, ThrowOnError>({
            ...options,
            url: '/api/forum/section'
        });
    }
    
    /**
     * 创建板块
     */
    public static create<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PostApiForumSectionData, ThrowOnError>) {
        return (options?.client ?? client).post<PostApiForumSectionResponse, PostApiForumSectionError, ThrowOnError>({
            ...options,
            url: '/api/forum/section'
        });
    }
    
    /**
     * 获取指定id论坛版块信息
     */
    public static get<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetApiForumSectionByIdData, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiForumSectionByIdResponse, GetApiForumSectionByIdError, ThrowOnError>({
            ...options,
            url: '/api/forum/section/{id}'
        });
    }
    
    /**
     * 删除指定id板块
     */
    public static remove<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<DeleteApiForumSectionByIdData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteApiForumSectionByIdResponse, DeleteApiForumSectionByIdError, ThrowOnError>({
            ...options,
            url: '/api/forum/section/{id}'
        });
    }
    
    /**
     * 更新指定id板块
     */
    public static update<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PutApiForumSectionByIdData, ThrowOnError>) {
        return (options?.client ?? client).put<PutApiForumSectionByIdResponse, PutApiForumSectionByIdError, ThrowOnError>({
            ...options,
            url: '/api/forum/section/{id}'
        });
    }
    
    /**
     * 板块分页数据
     */
    public static paginate<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetApiForumSectionPageAllData, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiForumSectionPageAllResponse, GetApiForumSectionPageAllError, ThrowOnError>({
            ...options,
            url: '/api/forum/section/page/all'
        });
    }
    
    /**
     * 登录人的板块分页数据
     */
    public static paginateSession<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetApiForumSectionPageSessionData, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiForumSectionPageSessionResponse, GetApiForumSectionPageSessionError, ThrowOnError>({
            ...options,
            url: '/api/forum/section/page/session'
        });
    }
    
}

export class FsService {
    /**
     * 新增服务
     */
    public static create<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PostApiFsData, ThrowOnError>) {
        return (options?.client ?? client).post<PostApiFsResponse, PostApiFsError, ThrowOnError>({
            ...options,
            url: '/api/fs'
        });
    }
    
    /**
     * 获取所有服务
     */
    public static getAll<ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<GetApiFsData, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiFsResponse, GetApiFsError, ThrowOnError>({
            ...options,
            url: '/api/fs'
        });
    }
    
    /**
     * 获取子节点
     */
    public static getChildren<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetApiFsChildrenByIdData, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiFsChildrenByIdResponse, GetApiFsChildrenByIdError, ThrowOnError>({
            ...options,
            url: '/api/fs/children/{id}'
        });
    }
    
    /**
     * 获取指定id服务
     */
    public static get<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetApiFsByIdData, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiFsByIdResponse, GetApiFsByIdError, ThrowOnError>({
            ...options,
            url: '/api/fs/{id}'
        });
    }
    
    /**
     * 更新指定id服务
     */
    public static update<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PatchApiFsByIdData, ThrowOnError>) {
        return (options?.client ?? client).patch<PatchApiFsByIdResponse, PatchApiFsByIdError, ThrowOnError>({
            ...options,
            url: '/api/fs/{id}'
        });
    }
    
    /**
     * 删除服务
     */
    public static remove<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<DeleteApiFsByIdData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteApiFsByIdResponse, DeleteApiFsByIdError, ThrowOnError>({
            ...options,
            url: '/api/fs/{id}'
        });
    }
    
}

export class InitializationService {
    /**
     * 创建超级管理员
     */
    public static createSuperAdmin<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PostApiInitializationCreateSuperAdminData, ThrowOnError>) {
        return (options?.client ?? client).post<PostApiInitializationCreateSuperAdminResponse, PostApiInitializationCreateSuperAdminError, ThrowOnError>({
            ...options,
            url: '/api/initialization/create-super-admin'
        });
    }
    
}

export class MallCartService {
    /**
     * 添加购物车
     */
    public static add<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PostApiMallCartData, ThrowOnError>) {
        return (options?.client ?? client).post<PostApiMallCartResponse, PostApiMallCartError, ThrowOnError>({
            ...options,
            url: '/api/mall/cart'
        });
    }
    
    /**
     * 获取用户购物车
     */
    public static getAll<ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiMallCartResponse, GetApiMallCartError, ThrowOnError>({
            ...options,
            url: '/api/mall/cart'
        });
    }
    
    /**
     * 删除购物车
     */
    public static remove<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<DeleteApiMallCartByIdData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteApiMallCartByIdResponse, DeleteApiMallCartByIdError, ThrowOnError>({
            ...options,
            url: '/api/mall/cart/{id}'
        });
    }
    
    /**
     * 更新购物车
     */
    public static update<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PutApiMallCartByIdData, ThrowOnError>) {
        return (options?.client ?? client).put<PutApiMallCartByIdResponse, PutApiMallCartByIdError, ThrowOnError>({
            ...options,
            url: '/api/mall/cart/{id}'
        });
    }
    
    /**
     * 批量更新购物车
     */
    public static batchUpdate<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PutApiMallCartBatchData, ThrowOnError>) {
        return (options?.client ?? client).put<PutApiMallCartBatchResponse, PutApiMallCartBatchError, ThrowOnError>({
            ...options,
            url: '/api/mall/cart/batch'
        });
    }
    
}

export class MallGoodService {
    /**
     * 创建商品
     */
    public static create<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PostApiMallGoodData, ThrowOnError>) {
        return (options?.client ?? client).post<PostApiMallGoodResponse, PostApiMallGoodError, ThrowOnError>({
            ...options,
            url: '/api/mall/good'
        });
    }
    
    /**
     * 获取所有商品数据
     */
    public static getAll<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetApiMallGoodData, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiMallGoodResponse, GetApiMallGoodError, ThrowOnError>({
            ...options,
            url: '/api/mall/good'
        });
    }
    
    /**
     * 删除商品
     */
    public static remove<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<DeleteApiMallGoodByIdData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteApiMallGoodByIdResponse, DeleteApiMallGoodByIdError, ThrowOnError>({
            ...options,
            url: '/api/mall/good/{id}'
        });
    }
    
    /**
     * 更新商品
     */
    public static update<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PutApiMallGoodByIdData, ThrowOnError>) {
        return (options?.client ?? client).put<PutApiMallGoodByIdResponse, PutApiMallGoodByIdError, ThrowOnError>({
            ...options,
            url: '/api/mall/good/{id}'
        });
    }
    
    /**
     * 获取id商品数据
     */
    public static get<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetApiMallGoodByIdData, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiMallGoodByIdResponse, GetApiMallGoodByIdError, ThrowOnError>({
            ...options,
            url: '/api/mall/good/{id}'
        });
    }
    
    /**
     * 获取分页商品数据
     */
    public static paginate<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetApiMallGoodPaginateData, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiMallGoodPaginateResponse, GetApiMallGoodPaginateError, ThrowOnError>({
            ...options,
            url: '/api/mall/good/paginate'
        });
    }
    
}

export class MallGoodCommentService {
    /**
     * 评论
     */
    public static create<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PostApiMallGoodCommentData, ThrowOnError>) {
        return (options?.client ?? client).post<PostApiMallGoodCommentResponse, PostApiMallGoodCommentError, ThrowOnError>({
            ...options,
            url: '/api/mall/good-comment'
        });
    }
    
    /**
     * 删除评论
     */
    public static remove<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<DeleteApiMallGoodCommentByIdData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteApiMallGoodCommentByIdResponse, DeleteApiMallGoodCommentByIdError, ThrowOnError>({
            ...options,
            url: '/api/mall/good-comment/{id}'
        });
    }
    
    /**
     * 游标分页
     */
    public static paginateWidthCursor<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetApiMallGoodCommentPageByCursorData, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiMallGoodCommentPageByCursorResponse, GetApiMallGoodCommentPageByCursorError, ThrowOnError>({
            ...options,
            url: '/api/mall/good-comment/pageByCursor'
        });
    }
    
    /**
     * 分页
     */
    public static paginate<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetApiMallGoodCommentPageData, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiMallGoodCommentPageResponse, GetApiMallGoodCommentPageError, ThrowOnError>({
            ...options,
            url: '/api/mall/good-comment/page'
        });
    }
    
}

export class MallGoodGroupService {
    /**
     * 创建商品分组
     */
    public static create<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PostApiMallGoodGroupData, ThrowOnError>) {
        return (options?.client ?? client).post<PostApiMallGoodGroupResponse, PostApiMallGoodGroupError, ThrowOnError>({
            ...options,
            url: '/api/mall/good-group'
        });
    }
    
    /**
     * 获取平铺商品分组数据
     */
    public static getAll<ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiMallGoodGroupResponse, GetApiMallGoodGroupError, ThrowOnError>({
            ...options,
            url: '/api/mall/good-group'
        });
    }
    
    /**
     * 删除商品分组
     */
    public static remove<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<DeleteApiMallGoodGroupByIdData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteApiMallGoodGroupByIdResponse, DeleteApiMallGoodGroupByIdError, ThrowOnError>({
            ...options,
            url: '/api/mall/good-group/{id}'
        });
    }
    
    /**
     * 更新商品分组
     */
    public static update<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PutApiMallGoodGroupByIdData, ThrowOnError>) {
        return (options?.client ?? client).put<PutApiMallGoodGroupByIdResponse, PutApiMallGoodGroupByIdError, ThrowOnError>({
            ...options,
            url: '/api/mall/good-group/{id}'
        });
    }
    
    /**
     * 获取商品分组
     */
    public static get<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetApiMallGoodGroupByIdData, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiMallGoodGroupByIdResponse, GetApiMallGoodGroupByIdError, ThrowOnError>({
            ...options,
            url: '/api/mall/good-group/{id}'
        });
    }
    
    /**
     * 获取商品分组树
     */
    public static getTree<ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiMallGoodGroupTreeResponse, GetApiMallGoodGroupTreeError, ThrowOnError>({
            ...options,
            url: '/api/mall/good-group/tree'
        });
    }
    
}

export class MallGoodRelationService {
    /**
     * 创建关系
     */
    public static create<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PostApiMallGoodRelationData, ThrowOnError>) {
        return (options?.client ?? client).post<PostApiMallGoodRelationResponse, PostApiMallGoodRelationError, ThrowOnError>({
            ...options,
            url: '/api/mall/good-relation'
        });
    }
    
    /**
     * 删除关系
     */
    public static remove<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<DeleteApiMallGoodRelationByIdData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteApiMallGoodRelationByIdResponse, DeleteApiMallGoodRelationByIdError, ThrowOnError>({
            ...options,
            url: '/api/mall/good-relation/{id}'
        });
    }
    
    /**
     * 筛选一个关系
     */
    public static getWidthFilter<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetApiMallGoodRelationItemData, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiMallGoodRelationItemResponse, GetApiMallGoodRelationItemError, ThrowOnError>({
            ...options,
            url: '/api/mall/good-relation/item'
        });
    }
    
}

export class MallGoodTagService {
    /**
     * 创建标签
     */
    public static create<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PostApiMallGoodTagData, ThrowOnError>) {
        return (options?.client ?? client).post<PostApiMallGoodTagResponse, PostApiMallGoodTagError, ThrowOnError>({
            ...options,
            url: '/api/mall/good-tag'
        });
    }
    
    /**
     * 获取所有标签
     */
    public static getAll<ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiMallGoodTagResponse, GetApiMallGoodTagError, ThrowOnError>({
            ...options,
            url: '/api/mall/good-tag'
        });
    }
    
    /**
     * 删除标签
     */
    public static remove<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<DeleteApiMallGoodTagByIdData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteApiMallGoodTagByIdResponse, DeleteApiMallGoodTagByIdError, ThrowOnError>({
            ...options,
            url: '/api/mall/good-tag/{id}'
        });
    }
    
    /**
     * 更新标签
     */
    public static remove<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PutApiMallGoodTagByIdData, ThrowOnError>) {
        return (options?.client ?? client).put<PutApiMallGoodTagByIdResponse, PutApiMallGoodTagByIdError, ThrowOnError>({
            ...options,
            url: '/api/mall/good-tag/{id}'
        });
    }
    
    /**
     * 获取标签
     */
    public static get<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetApiMallGoodTagByIdData, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiMallGoodTagByIdResponse, GetApiMallGoodTagByIdError, ThrowOnError>({
            ...options,
            url: '/api/mall/good-tag/{id}'
        });
    }
    
    /**
     * 标签分页
     */
    public static paginate<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetApiMallGoodTagPageData, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiMallGoodTagPageResponse, GetApiMallGoodTagPageError, ThrowOnError>({
            ...options,
            url: '/api/mall/good-tag/page'
        });
    }
    
}

export class MallOrderService {
    /**
     * 创建订单
     */
    public static create<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PostApiMallOrderData, ThrowOnError>) {
        return (options?.client ?? client).post<PostApiMallOrderResponse, PostApiMallOrderError, ThrowOnError>({
            ...options,
            url: '/api/mall/order'
        });
    }
    
    /**
     * 订单登录用户游标分页
     */
    public static paginateWidthCursorSession<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetApiMallOrderPageByCursorSessionData, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiMallOrderPageByCursorSessionResponse, GetApiMallOrderPageByCursorSessionError, ThrowOnError>({
            ...options,
            url: '/api/mall/order/pageByCursor/session'
        });
    }
    
    /**
     * 订单分页
     */
    public static paginate<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetApiMallOrderPageData, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiMallOrderPageResponse, GetApiMallOrderPageError, ThrowOnError>({
            ...options,
            url: '/api/mall/order/page'
        });
    }
    
    /**
     * 获取订单
     */
    public static get<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetApiMallOrderByIdData, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiMallOrderByIdResponse, GetApiMallOrderByIdError, ThrowOnError>({
            ...options,
            url: '/api/mall/order/{id}'
        });
    }
    
}

export class MallShopService {
    /**
     * 创建店铺
     */
    public static create<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PostApiMallShopData, ThrowOnError>) {
        return (options?.client ?? client).post<PostApiMallShopResponse, PostApiMallShopError, ThrowOnError>({
            ...options,
            url: '/api/mall/shop'
        });
    }
    
    /**
     * 获取所有店铺
     */
    public static getAll<ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiMallShopResponse, GetApiMallShopError, ThrowOnError>({
            ...options,
            url: '/api/mall/shop'
        });
    }
    
    /**
     * 删除店铺
     */
    public static remove<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<DeleteApiMallShopByIdData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteApiMallShopByIdResponse, DeleteApiMallShopByIdError, ThrowOnError>({
            ...options,
            url: '/api/mall/shop/{id}'
        });
    }
    
    /**
     * 更新店铺
     */
    public static update<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PutApiMallShopByIdData, ThrowOnError>) {
        return (options?.client ?? client).put<PutApiMallShopByIdResponse, PutApiMallShopByIdError, ThrowOnError>({
            ...options,
            url: '/api/mall/shop/{id}'
        });
    }
    
    /**
     * 获取单个店铺
     */
    public static get<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetApiMallShopByIdData, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiMallShopByIdResponse, GetApiMallShopByIdError, ThrowOnError>({
            ...options,
            url: '/api/mall/shop/{id}'
        });
    }
    
    /**
     * 获取分页数据
     */
    public static paginate<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetApiMallShopPaginateData, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiMallShopPaginateResponse, GetApiMallShopPaginateError, ThrowOnError>({
            ...options,
            url: '/api/mall/shop/paginate'
        });
    }
    
}

export class ResourcesService {
    /**
     * 获取资源所有数据
     */
    public static getAll<ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiResourcesResponse, GetApiResourcesError, ThrowOnError>({
            ...options,
            url: '/api/resources'
        });
    }
    
    /**
     * 创建资源
     */
    public static create<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PostApiResourcesData, ThrowOnError>) {
        return (options?.client ?? client).post<PostApiResourcesResponse, PostApiResourcesError, ThrowOnError>({
            ...options,
            url: '/api/resources'
        });
    }
    
    /**
     * 获取资源分页数据
     */
    public static paginate<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetApiResourcesPageData, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiResourcesPageResponse, GetApiResourcesPageError, ThrowOnError>({
            ...options,
            url: '/api/resources/page'
        });
    }
    
    /**
     * 获取指定id资源数据
     */
    public static get<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetApiResourcesByIdData, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiResourcesByIdResponse, GetApiResourcesByIdError, ThrowOnError>({
            ...options,
            url: '/api/resources/{id}'
        });
    }
    
    /**
     * 删除资源
     */
    public static remove<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<DeleteApiResourcesByIdData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteApiResourcesByIdResponse, DeleteApiResourcesByIdError, ThrowOnError>({
            ...options,
            url: '/api/resources/{id}'
        });
    }
    
    /**
     * 更新指定资源的所有数据
     */
    public static update<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PutApiResourcesByIdData, ThrowOnError>) {
        return (options?.client ?? client).put<PutApiResourcesByIdResponse, PutApiResourcesByIdError, ThrowOnError>({
            ...options,
            url: '/api/resources/{id}'
        });
    }
    
}

export class RolesService {
    /**
     * 获取所有角色数据
     */
    public static getAll<ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiRolesResponse, GetApiRolesError, ThrowOnError>({
            ...options,
            url: '/api/roles'
        });
    }
    
    /**
     * 创建角色
     */
    public static create<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PostApiRolesData, ThrowOnError>) {
        return (options?.client ?? client).post<PostApiRolesResponse, PostApiRolesError, ThrowOnError>({
            ...options,
            url: '/api/roles'
        });
    }
    
    /**
     * 获取分页角色数据
     */
    public static paginate<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetApiRolesPageData, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiRolesPageResponse, GetApiRolesPageError, ThrowOnError>({
            ...options,
            url: '/api/roles/page'
        });
    }
    
    /**
     * 删除角色
     */
    public static remove<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<DeleteApiRolesByIdData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteApiRolesByIdResponse, DeleteApiRolesByIdError, ThrowOnError>({
            ...options,
            url: '/api/roles/{id}'
        });
    }
    
    /**
     * 获取指定id角色信息
     */
    public static get<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetApiRolesByIdData, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiRolesByIdResponse, GetApiRolesByIdError, ThrowOnError>({
            ...options,
            url: '/api/roles/{id}'
        });
    }
    
    /**
     * 更新指定id角色数据
     */
    public static update<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PutApiRolesByIdData, ThrowOnError>) {
        return (options?.client ?? client).put<PutApiRolesByIdResponse, PutApiRolesByIdError, ThrowOnError>({
            ...options,
            url: '/api/roles/{id}'
        });
    }
    
}

export class SessionService {
    /**
     * 获取当前登录人用户信息
     */
    public static getUser<ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiSessionUserResponse, GetApiSessionUserError, ThrowOnError>({
            ...options,
            url: '/api/session/user'
        });
    }
    
    /**
     * 获取当前登录人有权限的资源
     */
    public static getResources<ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiSessionResourcesResponse, GetApiSessionResourcesError, ThrowOnError>({
            ...options,
            url: '/api/session/resources'
        });
    }
    
}

export class SettingService {
    /**
     * 批量获取配置key值
     */
    public static getItems<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetApiSettingByKeysData, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiSettingByKeysResponse, GetApiSettingByKeysError, ThrowOnError>({
            ...options,
            url: '/api/setting/{keys}'
        });
    }
    
    /**
     * 设置获取配置key值
     */
    public static setItems<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PostApiSettingData, ThrowOnError>) {
        return (options?.client ?? client).post<PostApiSettingResponse, PostApiSettingError, ThrowOnError>({
            ...options,
            url: '/api/setting'
        });
    }
    
}

export class SmsService {
    /**
     * sms测试
     */
    public static test<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PostApiSmsTestData, ThrowOnError>) {
        return (options?.client ?? client).post<PostApiSmsTestResponse, PostApiSmsTestError, ThrowOnError>({
            ...options,
            url: '/api/sms/test'
        });
    }
    
    /**
     * 发送验证码
     */
    public static sendCode<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PostApiSmsByTypeByPhoneData, ThrowOnError>) {
        return (options?.client ?? client).post<PostApiSmsByTypeByPhoneResponse, PostApiSmsByTypeByPhoneError, ThrowOnError>({
            ...options,
            url: '/api/sms/{type}/{phone}'
        });
    }
    
}

export class UsersService {
    /**
     * 获取所有用户数据
     */
    public static getAll<ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiUsersResponse, GetApiUsersError, ThrowOnError>({
            ...options,
            url: '/api/users'
        });
    }
    
    /**
     * 创建用户
     */
    public static create<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PostApiUsersData, ThrowOnError>) {
        return (options?.client ?? client).post<PostApiUsersResponse, PostApiUsersError, ThrowOnError>({
            ...options,
            url: '/api/users'
        });
    }
    
    /**
     * 获取分页用户数据
     */
    public static paginate<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetApiUsersPageData, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiUsersPageResponse, GetApiUsersPageError, ThrowOnError>({
            ...options,
            url: '/api/users/page'
        });
    }
    
    /**
     * 删除用户
     */
    public static remove<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<DeleteApiUsersByIdData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteApiUsersByIdResponse, DeleteApiUsersByIdError, ThrowOnError>({
            ...options,
            url: '/api/users/{id}'
        });
    }
    
    /**
     * 获取指定id的用户数据
     */
    public static get<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetApiUsersByIdData, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiUsersByIdResponse, GetApiUsersByIdError, ThrowOnError>({
            ...options,
            url: '/api/users/{id}'
        });
    }
    
    /**
     * 修改指定id的用户数据
     */
    public static update<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PutApiUsersByIdData, ThrowOnError>) {
        return (options?.client ?? client).put<PutApiUsersByIdResponse, PutApiUsersByIdError, ThrowOnError>({
            ...options,
            url: '/api/users/{id}'
        });
    }
    
    /**
     * 当前登录用户注销账号
     */
    public static removeSession<ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteApiUsersSessionResponse, DeleteApiUsersSessionError, ThrowOnError>({
            ...options,
            url: '/api/users/session'
        });
    }
    
    /**
     * 绑定微信用户
     */
    public static bindWeixinSession<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PostApiUsersBindWeixinSessionData, ThrowOnError>) {
        return (options?.client ?? client).post<PostApiUsersBindWeixinSessionResponse, PostApiUsersBindWeixinSessionError, ThrowOnError>({
            ...options,
            url: '/api/users/bindWeixinSession'
        });
    }
    
    /**
     * 绑定手机号
     */
    public static bindMobileSession<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PostApiUsersBindMobileSessionData, ThrowOnError>) {
        return (options?.client ?? client).post<PostApiUsersBindMobileSessionResponse, PostApiUsersBindMobileSessionError, ThrowOnError>({
            ...options,
            url: '/api/users/bindMobileSession'
        });
    }
    
    /**
     * 绑定小程序手机号
     */
    public static bindMpMobileSession<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PostApiUsersBindMpMobileSessionData, ThrowOnError>) {
        return (options?.client ?? client).post<PostApiUsersBindMpMobileSessionResponse, PostApiUsersBindMpMobileSessionError, ThrowOnError>({
            ...options,
            url: '/api/users/bindMpMobileSession'
        });
    }
    
    /**
     * 绑定用户名
     */
    public static bindUsernameSession<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PostApiUsersBindUsernameSessionData, ThrowOnError>) {
        return (options?.client ?? client).post<PostApiUsersBindUsernameSessionResponse, PostApiUsersBindUsernameSessionError, ThrowOnError>({
            ...options,
            url: '/api/users/bindUsernameSession'
        });
    }
    
}

export class WeixinService {
    /**
     * 获取所有微信应用数据
     */
    public static getAll<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetApiWeixinData, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiWeixinResponse, GetApiWeixinError, ThrowOnError>({
            ...options,
            url: '/api/weixin'
        });
    }
    
    /**
     * 创建微信应用
     */
    public static create<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PostApiWeixinData, ThrowOnError>) {
        return (options?.client ?? client).post<PostApiWeixinResponse, PostApiWeixinError, ThrowOnError>({
            ...options,
            url: '/api/weixin'
        });
    }
    
    /**
     * 获取分页微信应用数据
     */
    public static paginate<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetApiWeixinPageData, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiWeixinPageResponse, GetApiWeixinPageError, ThrowOnError>({
            ...options,
            url: '/api/weixin/page'
        });
    }
    
    /**
     * 删除微信应用
     */
    public static remove<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<DeleteApiWeixinByIdData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteApiWeixinByIdResponse, DeleteApiWeixinByIdError, ThrowOnError>({
            ...options,
            url: '/api/weixin/{id}'
        });
    }
    
    /**
     * 获取指定id微信应用数据
     */
    public static get<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetApiWeixinByIdData, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiWeixinByIdResponse, GetApiWeixinByIdError, ThrowOnError>({
            ...options,
            url: '/api/weixin/{id}'
        });
    }
    
    /**
     * 更新指定id微信应用数据
     */
    public static update<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PutApiWeixinByIdData, ThrowOnError>) {
        return (options?.client ?? client).put<PutApiWeixinByIdResponse, PutApiWeixinByIdError, ThrowOnError>({
            ...options,
            url: '/api/weixin/{id}'
        });
    }
    
}

export class WeixinMiniProgramService {
    /**
     * 获取手机号
     */
    public static getPhoneNumber<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetApiWeixinPlatformMiniProgramGetPhoneNumberByAppidData, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiWeixinPlatformMiniProgramGetPhoneNumberByAppidResponse, GetApiWeixinPlatformMiniProgramGetPhoneNumberByAppidError, ThrowOnError>({
            ...options,
            url: '/api/weixin-platform/mini-program/getPhoneNumber/{appid}'
        });
    }
    
    /**
     * code2Session
     */
    public static code2Session<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetApiWeixinPlatformMiniProgramCode2SessionByAppidData, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiWeixinPlatformMiniProgramCode2SessionByAppidResponse, GetApiWeixinPlatformMiniProgramCode2SessionByAppidError, ThrowOnError>({
            ...options,
            url: '/api/weixin-platform/mini-program/code2Session/{appid}'
        });
    }
    
}

export class WeixinOfficialAccountService {
    /**
     * 获取accessToken
     */
    public static getAccessToken<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetApiWeixinPlatformOfficialAccountGetAccessTokenByAppidData, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiWeixinPlatformOfficialAccountGetAccessTokenByAppidResponse, GetApiWeixinPlatformOfficialAccountGetAccessTokenByAppidError, ThrowOnError>({
            ...options,
            url: '/api/weixin-platform/official-account/getAccessToken/{appid}'
        });
    }
    
    /**
     * 获取公众号接收消息地址
     */
    public static getNotifyUrl<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetApiWeixinPlatformOfficialAccountGetNotifyUrlByAppidData, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiWeixinPlatformOfficialAccountGetNotifyUrlByAppidResponse, GetApiWeixinPlatformOfficialAccountGetNotifyUrlByAppidError, ThrowOnError>({
            ...options,
            url: '/api/weixin-platform/official-account/getNotifyUrl/{appid}'
        });
    }
    
    /**
     * 获取jssdk 认证签名
     */
    public static getJssdkSignature<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PostApiWeixinPlatformOfficialAccountJssdkGetSignatureByAppidData, ThrowOnError>) {
        return (options?.client ?? client).post<PostApiWeixinPlatformOfficialAccountJssdkGetSignatureByAppidResponse, PostApiWeixinPlatformOfficialAccountJssdkGetSignatureByAppidError, ThrowOnError>({
            ...options,
            url: '/api/weixin-platform/official-account/jssdk/get-signature/{appid}'
        });
    }
    
    /**
     * 获取所有模板列表
     */
    public static getTemplates<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetApiWeixinPlatformOfficialAccountTemplatesByAppidData, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiWeixinPlatformOfficialAccountTemplatesByAppidResponse, GetApiWeixinPlatformOfficialAccountTemplatesByAppidError, ThrowOnError>({
            ...options,
            url: '/api/weixin-platform/official-account/templates/{appid}'
        });
    }
    
    /**
     * 删除模板
     */
    public static removeTemplate<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<DeleteApiWeixinPlatformOfficialAccountTemplatesByIdByAppidData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteApiWeixinPlatformOfficialAccountTemplatesByIdByAppidResponse, DeleteApiWeixinPlatformOfficialAccountTemplatesByIdByAppidError, ThrowOnError>({
            ...options,
            url: '/api/weixin-platform/official-account/templates/{id}/{appid}'
        });
    }
    
    /**
     * 发送模板
     */
    public static send<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PostApiWeixinPlatformOfficialAccountSendByAppidData, ThrowOnError>) {
        return (options?.client ?? client).post<PostApiWeixinPlatformOfficialAccountSendByAppidResponse, PostApiWeixinPlatformOfficialAccountSendByAppidError, ThrowOnError>({
            ...options,
            url: '/api/weixin-platform/official-account/send/{appid}'
        });
    }
    
    /**
     * 获取微信JSSDK支付参数(自动下单, 兼容小程序)
     */
    public static getPayParams<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PostApiWeixinPlatformPayCenterPayParamsByAppidByMchidData, ThrowOnError>) {
        return (options?.client ?? client).post<PostApiWeixinPlatformPayCenterPayParamsByAppidByMchidResponse, PostApiWeixinPlatformPayCenterPayParamsByAppidByMchidError, ThrowOnError>({
            ...options,
            url: '/api/weixin-platform/pay-center/payParams/{appid}/{mchid}'
        });
    }
    
}

export class WeixinOfficialAccountConfigService {
    /**
     * 通过weixinId获取公众号配置
     */
    public static getAndCreateByWeixin<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetApiWeixinOfficialAccountConfigWeixinByWeixinIdData, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiWeixinOfficialAccountConfigWeixinByWeixinIdResponse, GetApiWeixinOfficialAccountConfigWeixinByWeixinIdError, ThrowOnError>({
            ...options,
            url: '/api/weixin/official-account-config/weixin/{weixinId}'
        });
    }
    
    /**
     * 更新指定id的公众号配置
     */
    public static update<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PutApiWeixinOfficialAccountConfigByIdData, ThrowOnError>) {
        return (options?.client ?? client).put<PutApiWeixinOfficialAccountConfigByIdResponse, PutApiWeixinOfficialAccountConfigByIdError, ThrowOnError>({
            ...options,
            url: '/api/weixin/official-account-config/{id}'
        });
    }
    
}

export class WeixinOfficialAccountNotifyService {
    public static WeixinOfficialAccountNotifyController_notify<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PostApiWeixinPlatformOfficialAccountNotifyByAppidData, ThrowOnError>) {
        return (options?.client ?? client).post<PostApiWeixinPlatformOfficialAccountNotifyByAppidResponse, PostApiWeixinPlatformOfficialAccountNotifyByAppidError, ThrowOnError>({
            ...options,
            url: '/api/weixin-platform/official-account/notify/{appid}'
        });
    }
    
    public static WeixinOfficialAccountNotifyController_checkSignature<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetApiWeixinPlatformOfficialAccountNotifyByAppidData, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiWeixinPlatformOfficialAccountNotifyByAppidResponse, GetApiWeixinPlatformOfficialAccountNotifyByAppidError, ThrowOnError>({
            ...options,
            url: '/api/weixin-platform/official-account/notify/{appid}'
        });
    }
    
}

export class WeixinOfficialAccountOauthService {
    public static WeixinOfficialAccountOauthController_oauthJumpInfo<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetApiWeixinPlatformOfficialAccountOauthOauthJumpInfoByAppidData, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiWeixinPlatformOfficialAccountOauthOauthJumpInfoByAppidResponse, GetApiWeixinPlatformOfficialAccountOauthOauthJumpInfoByAppidError, ThrowOnError>({
            ...options,
            url: '/api/weixin-platform/official-account-oauth/oauth-jump/info/{appid}'
        });
    }
    
    public static WeixinOfficialAccountOauthController_oauthJumpBase<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetApiWeixinPlatformOfficialAccountOauthOauthJumpBaseByAppidData, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiWeixinPlatformOfficialAccountOauthOauthJumpBaseByAppidResponse, GetApiWeixinPlatformOfficialAccountOauthOauthJumpBaseByAppidError, ThrowOnError>({
            ...options,
            url: '/api/weixin-platform/official-account-oauth/oauth-jump/base/{appid}'
        });
    }
    
}

export class WeixinPayService {
    /**
     * 创建支付配置
     */
    public static create<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PostApiWeixinPayData, ThrowOnError>) {
        return (options?.client ?? client).post<PostApiWeixinPayResponse, PostApiWeixinPayError, ThrowOnError>({
            ...options,
            url: '/api/weixin/pay'
        });
    }
    
    /**
     * 获取所有数据
     */
    public static getAll<ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiWeixinPayResponse, GetApiWeixinPayError, ThrowOnError>({
            ...options,
            url: '/api/weixin/pay'
        });
    }
    
    /**
     * 删除支付配置
     */
    public static remove<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<DeleteApiWeixinPayByIdData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteApiWeixinPayByIdResponse, DeleteApiWeixinPayByIdError, ThrowOnError>({
            ...options,
            url: '/api/weixin/pay/{id}'
        });
    }
    
    /**
     * 更新支付配置
     */
    public static update<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PutApiWeixinPayByIdData, ThrowOnError>) {
        return (options?.client ?? client).put<PutApiWeixinPayByIdResponse, PutApiWeixinPayByIdError, ThrowOnError>({
            ...options,
            url: '/api/weixin/pay/{id}'
        });
    }
    
    /**
     * id数据
     */
    public static get<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetApiWeixinPayByIdData, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiWeixinPayByIdResponse, GetApiWeixinPayByIdError, ThrowOnError>({
            ...options,
            url: '/api/weixin/pay/{id}'
        });
    }
    
    /**
     * 分页
     */
    public static paginate<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetApiWeixinPayPageData, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiWeixinPayPageResponse, GetApiWeixinPayPageError, ThrowOnError>({
            ...options,
            url: '/api/weixin/pay/page'
        });
    }
    
}

export class WeixinPlatformUserService {
    public static paginate<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetApiWeixinPlatformUserPaginateData, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiWeixinPlatformUserPaginateResponse, GetApiWeixinPlatformUserPaginateError, ThrowOnError>({
            ...options,
            url: '/api/weixin-platform-user/paginate'
        });
    }
    
}